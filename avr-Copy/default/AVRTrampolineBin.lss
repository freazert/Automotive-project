
AVRTrampolineBin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  00001ad8  00001b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bfb  00800318  00800318  00001d84  2**0
                  ALLOC
  3 .debug_aranges 000007a0  00000000  00000000  00001d88  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000018d7  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000065d1  00000000  00000000  00003dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001fd0  00000000  00000000  0000a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004002  00000000  00000000  0000c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b80  00000000  00000000  000103a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001f46  00000000  00000000  00010f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002611  00000000  00000000  00012e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000658  00000000  00000000  0001547b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *
 * See page 65 of the OSEK spec
 */
FUNC(tpl_status, OS_CODE) tpl_cancel_alarm_service(
  CONST(tpl_alarm_id, AUTOMATIC) alarm_id)
{
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
    
  return result;
}

FUNC(void, OS_CODE) tpl_null_it(P2CONST(void, OS_APPL_DATA, AUTOMATIC) foo)
{
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
 *  The ressource RES_SCHEDULER is now put in the tpl_resource_table array
 *  as the last item. This simplify tpl_get_resource_service.
 */
FUNC(tpl_status, OS_CODE) tpl_release_resource_service(
  CONST(tpl_resource_id, AUTOMATIC) res_id)
{
       8:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__vector_2>
	
  /*  unlock the kernel  */
  UNLOCK_KERNEL()
	
  return result;
}
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
 * tpl_remove_time_obj removes a time object from the time object queue
 * of the counter it belongs to.
 */
FUNC(void, OS_CODE) tpl_remove_time_obj(
    P2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA) time_obj)
{
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
 * tpl_current_os_state returns the current state of the OS.
 *
 * @see #tpl_os_state
 */
FUNC(tpl_os_state, OS_CODE) tpl_current_os_state(void)
{
      14:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_5>
	
  PROCESS_ERROR(result_action);
   
  return result_action;
	
}
      18:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_6>

#define API_START_SEC_CODE
#include "tpl_memmap.h"

FUNC(void, OS_CODE) CallTerminateTask(void)
{
      1c:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_7>


FUNC(StatusType, OS_CODE) Schedule(void)
{
    return OSEK_STATUS_MASK & tpl_schedule_service();
}
      20:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_8>
{
	while(1);
}

void tpl_shutdown(void)
{
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
		printf("ID5 Data: %c \n", value);
	#endif
}

// testing the canStop start function
void functionLedSet(t_BUTTON c) {
      28:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__vector_10>
	EICRB	= EICRA | (1<< ISC71) | (1 << ISC70) | (1<< ISC61) | (1 << ISC60) 
	| (1<< ISC51) | (1 << ISC50) | (1<< ISC41) | (1 << ISC40);
	//enbale the interrupts
	EIMSK	= EIMSK | (1 << INT7) | (1 << INT6) | (1 << INT5) | (1 << INT5)  
	| (1 << INT4)  |(1 << INT1);
}
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
			break;
	
	}*/
}

void canInitReceiveOne(uint16_t can_id , char mob, char length) {
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
	LEDS on
    @param bitmask char.
	@return void
*/
void ledsOn(char bitmask)
{
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
	Set pulse width modulation 
    @param pwmLength char -> 8bits.
	@return void
*/
void pwmSet(char pwmLength)
{
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

void USART1_Transmit_String(char* string) {
	for(int i = 0; string[i] != '\0'; i++) {
		USART1_Transmit(string[i]);
	}
}
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_25>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 ed       	ldi	r30, 0xD8	; 216
      a8:	fa e1       	ldi	r31, 0x1A	; 26
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a8 31       	cpi	r26, 0x18	; 24
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	1f e0       	ldi	r17, 0x0F	; 15
      bc:	a8 e1       	ldi	r26, 0x18	; 24
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 31       	cpi	r26, 0x13	; 19
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 d2 06 	call	0xda4	; 0xda4 <main>
      ce:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <tpl_switch_context>:
.global tpl_switch_context_from_it 
tpl_switch_context:
tpl_switch_context_from_it:

	/* push r16 and the sreg register on the stack */
	push r16
      d6:	0f 93       	push	r16
	in   r16, _SFR_IO_ADDR(SREG)
      d8:	0f b7       	in	r16, 0x3f	; 63
	push r16
      da:	0f 93       	push	r16

	/* verification if the first parameter is equal to 0 (Old_context == NULL)*/
	ldi r16, 0
      dc:	00 e0       	ldi	r16, 0x00	; 0
	cp r16, r24
      de:	08 17       	cp	r16, r24
	breq first_part_equal // if the first 8 bits are null jump to first_part_equal
      e0:	09 f0       	breq	.+2      	; 0xe4 <first_part_equal>
	rjmp save_context // else jump to save_context
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <save_context>

000000e4 <first_part_equal>:

first_part_equal :
	cp r16, r25
      e4:	09 17       	cp	r16, r25
	breq unsave_context // if the second part is null Old_context == NULL then jump to unsave_context
      e6:	91 f1       	breq	.+100    	; 0x14c <unsave_context>

000000e8 <save_context>:
	
	/* we have to save the old context*/
save_context :

	/* put all register on the stack */
	push r31
      e8:	ff 93       	push	r31
	push r30
      ea:	ef 93       	push	r30
	push r29
      ec:	df 93       	push	r29
	push r28
      ee:	cf 93       	push	r28
	push r27
      f0:	bf 93       	push	r27
	push r26
      f2:	af 93       	push	r26
	push r25	
      f4:	9f 93       	push	r25
	push r24
      f6:	8f 93       	push	r24
	push r23
      f8:	7f 93       	push	r23
	push r22
      fa:	6f 93       	push	r22
	push r21
      fc:	5f 93       	push	r21
	push r20
      fe:	4f 93       	push	r20
	push r19
     100:	3f 93       	push	r19
	push r18
     102:	2f 93       	push	r18
	push r17
     104:	1f 93       	push	r17
	// r16 is pushed at the start of the function
	push r15
     106:	ff 92       	push	r15
	push r14
     108:	ef 92       	push	r14
	push r13
     10a:	df 92       	push	r13
	push r12
     10c:	cf 92       	push	r12
	push r11
     10e:	bf 92       	push	r11
	push r10
     110:	af 92       	push	r10
	push r9
     112:	9f 92       	push	r9
	push r8
     114:	8f 92       	push	r8
	push r7
     116:	7f 92       	push	r7
	push r6
     118:	6f 92       	push	r6
	push r5
     11a:	5f 92       	push	r5
	push r4
     11c:	4f 92       	push	r4
	push r3
     11e:	3f 92       	push	r3
	push r2
     120:	2f 92       	push	r2
	push r1
     122:	1f 92       	push	r1
	push r0
     124:	0f 92       	push	r0


	/* save the old stack pointer */
	/* R24 is a pointer on the old context. */
	movw r28,r24 // mov R24 to Y.
     126:	ec 01       	movw	r28, r24
	ldd  r30,Y+0 // dereference to access the first field
     128:	e8 81       	ld	r30, Y
	ldd  r31,Y+1
     12a:	f9 81       	ldd	r31, Y+1	; 0x01
	in   r26, _SFR_IO_ADDR(SPL) //save the Stack pointer into Z
     12c:	ad b7       	in	r26, 0x3d	; 61
	in   r27, _SFR_IO_ADDR(SPH)
     12e:	be b7       	in	r27, 0x3e	; 62

	adiw r26,0x21 // we add 21 to the old stack pointer because we have done 0x21 pushs 
     130:	91 96       	adiw	r26, 0x21	; 33

	std  Z+0, r26 //save (updated) SP into the first field of the old context.
     132:	a0 83       	st	Z, r26
	std  Z+1, r27
     134:	b1 83       	std	Z+1, r27	; 0x01

	// we make a "for" loops for(r24=0;r24<=r25;r24++)
	ldi  r24,0x00
     136:	80 e0       	ldi	r24, 0x00	; 0
	ldi  r25,0x21
     138:	91 e2       	ldi	r25, 0x21	; 33
	
	adiw r30,0x01 //because SP is 16 bits wide.
     13a:	31 96       	adiw	r30, 0x01	; 1

0000013c <less1>:

less1 :
	pop  r26 // we take a register
     13c:	af 91       	pop	r26
	adiw r30,0x01 // we increment the address
     13e:	31 96       	adiw	r30, 0x01	; 1
	std  Z+0,r26 // we put the register on the chart
     140:	a0 83       	st	Z, r26

	inc  r24 // r24++
     142:	83 95       	inc	r24
	cp   r24,r25 
     144:	89 17       	cp	r24, r25
	brlt less1 // if r24<=r25 jump to less1
     146:	d4 f3       	brlt	.-12     	; 0x13c <less1>

	push r16
     148:	0f 93       	push	r16
	push r16
     14a:	0f 93       	push	r16

0000014c <unsave_context>:
unsave_context : // we have push 2 register on the stack, we have to pop them
	pop r16
     14c:	0f 91       	pop	r16
	pop r16
     14e:	0f 91       	pop	r16

	/* Get the new stack pointer */
    movw r28,r22 // the adress of the new stack pointeur is in r22,r23
     150:	eb 01       	movw	r28, r22
	// we have to dereference it
	ldd  r30,Y+0
     152:	e8 81       	ld	r30, Y
	ldd  r31,Y+1
     154:	f9 81       	ldd	r31, Y+1	; 0x01
    ldd  r28,Z+0
     156:	c0 81       	ld	r28, Z
	ldd  r29,Z+1
     158:	d1 81       	ldd	r29, Z+1	; 0x01

	/* put the new stack pointer */
	out _SFR_IO_ADDR(SPL), r28
     15a:	cd bf       	out	0x3d, r28	; 61
	out _SFR_IO_ADDR(SPH), r29 
     15c:	de bf       	out	0x3e, r29	; 62

	// we make a "for" loops for(r24=0;r24<=r25;r24++)
	ldi  r24,0x00
     15e:	80 e0       	ldi	r24, 0x00	; 0
	ldi  r25,0x21
     160:	91 e2       	ldi	r25, 0x21	; 33
	adiw r30,0x23 // here we fill the tab by the end
     162:	b3 96       	adiw	r30, 0x23	; 35

00000164 <less2>:

less2 :
	sbiw r30,0x01 
     164:	31 97       	sbiw	r30, 0x01	; 1
	ldd  r26,Z+0 // get the old value of the register from the chart
     166:	a0 81       	ld	r26, Z
	push r26 // push the register
     168:	af 93       	push	r26

	inc  r24 // r24++
     16a:	83 95       	inc	r24
	cp   r24,r25
     16c:	89 17       	cp	r24, r25
	brlt less2 // if r24<=r25 jump to less2
     16e:	d4 f3       	brlt	.-12     	; 0x164 <less2>

	/* Get all register from the stack */
	pop r0
     170:	0f 90       	pop	r0
	pop r1
     172:	1f 90       	pop	r1
	pop r2
     174:	2f 90       	pop	r2
	pop r3
     176:	3f 90       	pop	r3
	pop r4
     178:	4f 90       	pop	r4
	pop r5
     17a:	5f 90       	pop	r5
	pop r6
     17c:	6f 90       	pop	r6
	pop r7
     17e:	7f 90       	pop	r7
	pop r8
     180:	8f 90       	pop	r8
	pop r9
     182:	9f 90       	pop	r9
	pop r10
     184:	af 90       	pop	r10
	pop r11
     186:	bf 90       	pop	r11
	pop r12
     188:	cf 90       	pop	r12
	pop r13
     18a:	df 90       	pop	r13
	pop r14
     18c:	ef 90       	pop	r14
	pop r15
     18e:	ff 90       	pop	r15
	// r16 is pop at the end of the function
	pop r17
     190:	1f 91       	pop	r17
	pop r18
     192:	2f 91       	pop	r18
	pop r19
     194:	3f 91       	pop	r19
	pop r20
     196:	4f 91       	pop	r20
	pop r21
     198:	5f 91       	pop	r21
	pop r22
     19a:	6f 91       	pop	r22
	pop r23
     19c:	7f 91       	pop	r23
	pop r24
     19e:	8f 91       	pop	r24
	pop r25
     1a0:	9f 91       	pop	r25
	pop r26
     1a2:	af 91       	pop	r26
	pop r27
     1a4:	bf 91       	pop	r27
	pop r28
     1a6:	cf 91       	pop	r28
	pop r29
     1a8:	df 91       	pop	r29
	pop r30
     1aa:	ef 91       	pop	r30
	pop r31
     1ac:	ff 91       	pop	r31


	/* get sreg register and r16 from the stack */
	pop r16
     1ae:	0f 91       	pop	r16
	out _SFR_IO_ADDR(SREG), r16
     1b0:	0f bf       	out	0x3f, r16	; 63
	pop r16
     1b2:	0f 91       	pop	r16

	ret
     1b4:	08 95       	ret

000001b6 <tpl_raise_alarm>:
 *
 * @param time_obj  The alarm to raise.
 */
FUNC(tpl_status, OS_CODE) tpl_raise_alarm(
    P2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA) time_obj)
{
     1b6:	fc 01       	movw	r30, r24
  /*  Get the alarm descriptor                            */
  P2VAR(tpl_alarm_static, AUTOMATIC, OS_APPL_DATA) stat_alarm =
    (tpl_alarm_static *)time_obj->stat_part;
  /*  Get the action to perform from the alarm descriptor */
  P2CONST(tpl_action, AUTOMATIC, OS_APPL_CONST) action_desc =
    stat_alarm->action;
     1b8:	01 90       	ld	r0, Z+
     1ba:	f0 81       	ld	r31, Z
     1bc:	e0 2d       	mov	r30, r0
     1be:	04 80       	ldd	r0, Z+4	; 0x04
     1c0:	f5 81       	ldd	r31, Z+5	; 0x05
     1c2:	e0 2d       	mov	r30, r0
  
  TRACE_ALARM_EXPIRE(time_obj)
  /*  Call the action                                     */
  result = (action_desc->action)(action_desc) ;
     1c4:	20 81       	ld	r18, Z
     1c6:	31 81       	ldd	r19, Z+1	; 0x01
     1c8:	cf 01       	movw	r24, r30
     1ca:	f9 01       	movw	r30, r18
     1cc:	09 95       	icall

  return result;
}
     1ce:	08 95       	ret

000001d0 <tpl_get_interrupt_lock_status>:
#include "tpl_memmap.h"
FUNC(tpl_bool, OS_CODE) tpl_get_interrupt_lock_status(void)
{
    VAR(tpl_bool, AUTOMATIC) result;
	
    if( (TRUE == tpl_user_task_lock) || (tpl_cpt_user_task_lock_OS > 0) || (tpl_cpt_user_task_lock_All > 0) )
     1d0:	80 91 1c 03 	lds	r24, 0x031C
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	c9 f0       	breq	.+50     	; 0x20a <tpl_get_interrupt_lock_status+0x3a>
     1d8:	80 91 21 03 	lds	r24, 0x0321
     1dc:	90 91 22 03 	lds	r25, 0x0322
     1e0:	a0 91 23 03 	lds	r26, 0x0323
     1e4:	b0 91 24 03 	lds	r27, 0x0324
     1e8:	00 97       	sbiw	r24, 0x00	; 0
     1ea:	a1 05       	cpc	r26, r1
     1ec:	b1 05       	cpc	r27, r1
     1ee:	69 f4       	brne	.+26     	; 0x20a <tpl_get_interrupt_lock_status+0x3a>
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	80 91 1d 03 	lds	r24, 0x031D
     1f6:	90 91 1e 03 	lds	r25, 0x031E
     1fa:	a0 91 1f 03 	lds	r26, 0x031F
     1fe:	b0 91 20 03 	lds	r27, 0x0320
     202:	00 97       	sbiw	r24, 0x00	; 0
     204:	a1 05       	cpc	r26, r1
     206:	b1 05       	cpc	r27, r1
     208:	09 f0       	breq	.+2      	; 0x20c <tpl_get_interrupt_lock_status+0x3c>
     20a:	21 e0       	ldi	r18, 0x01	; 1
    {
        result = FALSE;
    }
	
    return result;
}
     20c:	82 2f       	mov	r24, r18
     20e:	08 95       	ret

00000210 <tpl_reset_interrupt_lock_status>:

FUNC(void, OS_CODE) tpl_reset_interrupt_lock_status(void)
{
	tpl_user_task_lock = FALSE;
     210:	10 92 1c 03 	sts	0x031C, r1
	
	tpl_cpt_user_task_lock_All = 0;
     214:	10 92 1d 03 	sts	0x031D, r1
     218:	10 92 1e 03 	sts	0x031E, r1
     21c:	10 92 1f 03 	sts	0x031F, r1
     220:	10 92 20 03 	sts	0x0320, r1
	tpl_cpt_user_task_lock_OS = 0;
     224:	10 92 21 03 	sts	0x0321, r1
     228:	10 92 22 03 	sts	0x0322, r1
     22c:	10 92 23 03 	sts	0x0323, r1
     230:	10 92 24 03 	sts	0x0324, r1
	
	tpl_locking_depth = tpl_cpt_os_task_lock;
     234:	80 91 25 03 	lds	r24, 0x0325
     238:	90 91 26 03 	lds	r25, 0x0326
     23c:	a0 91 27 03 	lds	r26, 0x0327
     240:	b0 91 28 03 	lds	r27, 0x0328
     244:	80 93 18 03 	sts	0x0318, r24
     248:	90 93 19 03 	sts	0x0319, r25
     24c:	a0 93 1a 03 	sts	0x031A, r26
     250:	b0 93 1b 03 	sts	0x031B, r27
}
     254:	08 95       	ret

00000256 <tpl_activate_isr>:

/*
 */
STATIC FUNC(void, OS_CODE) tpl_activate_isr(
  CONST(tpl_isr_id, AUTOMATIC) isr_id)
{
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	28 2f       	mov	r18, r24
  CONSTP2VAR(tpl_proc, AUTOMATIC, OS_APPL_DATA) isr =
    tpl_dyn_proc_table[isr_id];
     25c:	e8 2f       	mov	r30, r24
     25e:	ff 27       	eor	r31, r31
     260:	e7 fd       	sbrc	r30, 7
     262:	f0 95       	com	r31
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	df 01       	movw	r26, r30
     26a:	a8 52       	subi	r26, 0x28	; 40
     26c:	bd 4f       	sbci	r27, 0xFD	; 253
     26e:	cd 91       	ld	r28, X+
     270:	dc 91       	ld	r29, X
  /*  MISRA RULE 33 VIOLATION: the right statement does
      not need to be executed if the first test fails
  */
  if ((isr->activate_count < tpl_stat_proc_table[isr_id]->max_activate_count)
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	ee 53       	subi	r30, 0x3E	; 62
     276:	fd 4f       	sbci	r31, 0xFD	; 253
     278:	01 90       	ld	r0, Z+
     27a:	f0 81       	ld	r31, Z
     27c:	e0 2d       	mov	r30, r0
     27e:	84 85       	ldd	r24, Z+12	; 0x0c
     280:	98 17       	cp	r25, r24
     282:	68 f4       	brcc	.+26     	; 0x29e <tpl_activate_isr+0x48>
#if WITH_AUTOSAR == YES
      && (tpl_is_isr2_enabled(isr_id))
#endif
      )
  {
    if (isr->activate_count == 0)
     284:	99 23       	and	r25, r25
     286:	29 f4       	brne	.+10     	; 0x292 <tpl_activate_isr+0x3c>
    {
      /*  check the isr is in the SUSPENDED state before moving it        */
      if (isr->state == (tpl_proc_state)SUSPENDED)
     288:	8c 81       	ldd	r24, Y+4	; 0x04
     28a:	88 23       	and	r24, r24
     28c:	11 f4       	brne	.+4      	; 0x292 <tpl_activate_isr+0x3c>
      {
        isr->state = (tpl_proc_state)READY_AND_NEW;
     28e:	85 e0       	ldi	r24, 0x05	; 5
     290:	8c 83       	std	Y+4, r24	; 0x04
      }
    }
    /*  put it in the list  */
    TRACE_ISR_ACTIVATE(isr_id);
    tpl_put_new_proc(isr_id);
     292:	82 2f       	mov	r24, r18
     294:	0e 94 3b 04 	call	0x876	; 0x876 <tpl_put_new_proc>
    /*  inc the isr activation count. When the isr will terminate
        it will dec this count and if not zero it will be reactivated   */
    isr->activate_count++;
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	8f 5f       	subi	r24, 0xFF	; 255
     29c:	8a 83       	std	Y+2, r24	; 0x02
  }
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <tpl_central_interrupt_handler>:
 * tpl_central_interrupt_handler saves the context of the interrupted
 * task / interrupt handler, switches to the context of the handler
 * and calls the handler
 */
FUNC(void, OS_CODE) tpl_central_interrupt_handler(CONST(u16, AUTOMATIC) isr_id)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
   */
#if WITH_OS_EXTENDED == YES
  if ((isr_id >= TASK_COUNT) && (isr_id < (TASK_COUNT + ISR_COUNT)))
  {
#endif
    tpl_it_nesting++;
     2a8:	20 91 29 03 	lds	r18, 0x0329
     2ac:	30 91 2a 03 	lds	r19, 0x032A
     2b0:	40 91 2b 03 	lds	r20, 0x032B
     2b4:	50 91 2c 03 	lds	r21, 0x032C
     2b8:	2f 5f       	subi	r18, 0xFF	; 255
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	4f 4f       	sbci	r20, 0xFF	; 255
     2be:	5f 4f       	sbci	r21, 0xFF	; 255
     2c0:	20 93 29 03 	sts	0x0329, r18
     2c4:	30 93 2a 03 	sts	0x032A, r19
     2c8:	40 93 2b 03 	sts	0x032B, r20
     2cc:	50 93 2c 03 	sts	0x032C, r21
    
    isr = tpl_isr_stat_table[isr_id - TASK_COUNT];
     2d0:	fc 01       	movw	r30, r24
     2d2:	ee 0f       	add	r30, r30
     2d4:	ff 1f       	adc	r31, r31
     2d6:	ea 51       	subi	r30, 0x1A	; 26
     2d8:	fd 4f       	sbci	r31, 0xFD	; 253
     2da:	c0 81       	ld	r28, Z
     2dc:	d1 81       	ldd	r29, Z+1	; 0x01
    
    if (isr != NULL)
     2de:	20 97       	sbiw	r28, 0x00	; 0
     2e0:	a9 f0       	breq	.+42     	; 0x30c <tpl_central_interrupt_handler+0x68>
    {
      if ((isr->next) == NULL)
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	9b 81       	ldd	r25, Y+3	; 0x03
     2e6:	89 2b       	or	r24, r25
     2e8:	21 f4       	brne	.+8      	; 0x2f2 <tpl_central_interrupt_handler+0x4e>
      {
        /*  Only one handler for this id. run the handler   */
        tpl_activate_isr(isr->isr_id);
     2ea:	8c 81       	ldd	r24, Y+4	; 0x04
     2ec:	0e 94 2b 01 	call	0x256	; 0x256 <tpl_activate_isr>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <tpl_central_interrupt_handler+0x68>
      else
      {
        /*  look for the handler    */
        while (isr != NULL)
        {
          if (isr->helper() == TRUE)
     2f2:	e8 81       	ld	r30, Y
     2f4:	f9 81       	ldd	r31, Y+1	; 0x01
     2f6:	09 95       	icall
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	19 f4       	brne	.+6      	; 0x302 <tpl_central_interrupt_handler+0x5e>
          {
            /* activate the handler */
            tpl_activate_isr(isr->isr_id);
     2fc:	8c 81       	ldd	r24, Y+4	; 0x04
     2fe:	0e 94 2b 01 	call	0x256	; 0x256 <tpl_activate_isr>
			
          }
          isr = isr->next;
     302:	0a 80       	ldd	r0, Y+2	; 0x02
     304:	db 81       	ldd	r29, Y+3	; 0x03
     306:	c0 2d       	mov	r28, r0
        tpl_activate_isr(isr->isr_id);
      }
      else
      {
        /*  look for the handler    */
        while (isr != NULL)
     308:	20 97       	sbiw	r28, 0x00	; 0
     30a:	99 f7       	brne	.-26     	; 0x2f2 <tpl_central_interrupt_handler+0x4e>
          isr = isr->next;
        }
      }
    }
    
    tpl_it_nesting--;
     30c:	80 91 29 03 	lds	r24, 0x0329
     310:	90 91 2a 03 	lds	r25, 0x032A
     314:	a0 91 2b 03 	lds	r26, 0x032B
     318:	b0 91 2c 03 	lds	r27, 0x032C
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	a1 09       	sbc	r26, r1
     320:	b1 09       	sbc	r27, r1
     322:	80 93 29 03 	sts	0x0329, r24
     326:	90 93 2a 03 	sts	0x032A, r25
     32a:	a0 93 2b 03 	sts	0x032B, r26
     32e:	b0 93 2c 03 	sts	0x032C, r27
    
    if (tpl_it_nesting == 0)
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	a1 05       	cpc	r26, r1
     336:	b1 05       	cpc	r27, r1
     338:	81 f4       	brne	.+32     	; 0x35a <tpl_central_interrupt_handler+0xb6>
    {
      tpl_schedule_from_running();
     33a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <tpl_schedule_from_running>
      
#if WITH_SYSTEM_CALL == NO
      if (tpl_kern.need_switch != NO_NEED_SWITCH)
     33e:	80 91 90 01 	lds	r24, 0x0190
     342:	88 23       	and	r24, r24
     344:	51 f0       	breq	.+20     	; 0x35a <tpl_central_interrupt_handler+0xb6>
      {
        tpl_switch_context_from_it(
     346:	60 91 88 01 	lds	r22, 0x0188
     34a:	70 91 89 01 	lds	r23, 0x0189
     34e:	80 91 86 01 	lds	r24, 0x0186
     352:	90 91 87 01 	lds	r25, 0x0187
     356:	0e 94 6b 00 	call	0xd6	; 0xd6 <tpl_switch_context>
#endif
    }
#if WITH_OS_EXTENDED == YES
  }
#endif
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <tpl_terminate_isr2_service>:
 *
 * While this function is not part of the OSEK API, it is used
 * to terminate an ISR2 routine
 */
FUNC(tpl_status, OS_CODE) tpl_terminate_isr2_service(void)
{
     360:	1f 93       	push	r17
  /*  init the error to no error  */
  VAR(tpl_status, AUTOMATIC) result = E_OK;
  
  CHECK_INTERRUPT_LOCK(result)
     362:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <tpl_get_interrupt_lock_status>
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <tpl_terminate_isr2_service+0xe>
     36a:	13 e1       	ldi	r17, 0x13	; 19
     36c:	01 c0       	rjmp	.+2      	; 0x370 <tpl_terminate_isr2_service+0x10>
     36e:	10 e0       	ldi	r17, 0x00	; 0
#if ISR_COUNT > 0
  IF_NO_EXTENDED_ERROR(result)
  
  /* the activate count is decreased
   */
  tpl_kern.running->activate_count--;
     370:	e0 91 8c 01 	lds	r30, 0x018C
     374:	f0 91 8d 01 	lds	r31, 0x018D
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	81 50       	subi	r24, 0x01	; 1
     37c:	82 83       	std	Z+2, r24	; 0x02
    
  /*  and let the scheduler do its job  */
  TRACE_ISR_TERMINATE(tpl_kern.running_id,tpl_kern.running_id)
  tpl_schedule_from_dying();
     37e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <tpl_schedule_from_dying>
 
  #if WITH_SYSTEM_CALL == NO
		if (tpl_kern.need_switch != NO_NEED_SWITCH)
     382:	80 91 90 01 	lds	r24, 0x0190
     386:	88 23       	and	r24, r24
     388:	41 f0       	breq	.+16     	; 0x39a <tpl_terminate_isr2_service+0x3a>
		{
			tpl_switch_context(NULL, &(tpl_kern.s_running->context));
     38a:	60 91 88 01 	lds	r22, 0x0188
     38e:	70 91 89 01 	lds	r23, 0x0189
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 6b 00 	call	0xd6	; 0xd6 <tpl_switch_context>
#endif
   
  PROCESS_ERROR(result)
    
  return result;
}
     39a:	81 2f       	mov	r24, r17
     39c:	1f 91       	pop	r17
     39e:	08 95       	ret

000003a0 <tpl_release_all_resources>:
FUNC(void, OS_CODE) tpl_release_all_resources(
  CONST(tpl_proc_id, AUTOMATIC) proc_id)
{
  /*  Get the resource pointer of the process */
  P2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA) res =
  tpl_dyn_proc_table[proc_id]->resources;
     3a0:	e8 2f       	mov	r30, r24
     3a2:	ff 27       	eor	r31, r31
     3a4:	e7 fd       	sbrc	r30, 7
     3a6:	f0 95       	com	r31
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e8 52       	subi	r30, 0x28	; 40
     3ae:	fd 4f       	sbci	r31, 0xFD	; 253
     3b0:	01 90       	ld	r0, Z+
     3b2:	f0 81       	ld	r31, Z
     3b4:	e0 2d       	mov	r30, r0
     3b6:	a0 81       	ld	r26, Z
     3b8:	b1 81       	ldd	r27, Z+1	; 0x01
#if WITH_TRACE == YES
  VAR(tpl_resource_id, AUTOMATIC) res_id;
#endif /* WITH_TRACE */
	
  if (res != NULL)
     3ba:	10 97       	sbiw	r26, 0x00	; 0
     3bc:	b1 f0       	breq	.+44     	; 0x3ea <tpl_release_all_resources+0x4a>
  {
    tpl_dyn_proc_table[proc_id]->resources = NULL;
     3be:	11 82       	std	Z+1, r1	; 0x01
     3c0:	10 82       	st	Z, r1
    
    do
    {
      CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA) next_res =
      res->next_res;
      res->owner = INVALID_TASK;
     3c2:	40 91 25 02 	lds	r20, 0x0225
    tpl_dyn_proc_table[proc_id]->resources = NULL;
    
    do
    {
      CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA) next_res =
      res->next_res;
     3c6:	13 96       	adiw	r26, 0x03	; 3
     3c8:	8c 91       	ld	r24, X
     3ca:	13 97       	sbiw	r26, 0x03	; 3
     3cc:	14 96       	adiw	r26, 0x04	; 4
     3ce:	9c 91       	ld	r25, X
     3d0:	14 97       	sbiw	r26, 0x04	; 4
      res->owner = INVALID_TASK;
     3d2:	12 96       	adiw	r26, 0x02	; 2
     3d4:	4c 93       	st	X, r20
     3d6:	12 97       	sbiw	r26, 0x02	; 2
      res->next_res = NULL;
     3d8:	14 96       	adiw	r26, 0x04	; 4
     3da:	1c 92       	st	X, r1
     3dc:	1e 92       	st	-X, r1
     3de:	13 97       	sbiw	r26, 0x03	; 3
     3e0:	9c 01       	movw	r18, r24
     3e2:	d9 01       	movw	r26, r18
	  }
	  TRACE_RES_RELEASED(res_id)
#endif /* WITH_TRACE */
		
	  res = next_res;
    } while (res != NULL);
     3e4:	21 15       	cp	r18, r1
     3e6:	31 05       	cpc	r19, r1
     3e8:	71 f7       	brne	.-36     	; 0x3c6 <tpl_release_all_resources+0x26>
     3ea:	08 95       	ret

000003ec <tpl_chain_task_service>:
}


FUNC(StatusType, OS_CODE) tpl_chain_task_service(
  CONST(tpl_task_id, AUTOMATIC) task_id)
{
     3ec:	1f 93       	push	r17
     3ee:	18 2f       	mov	r17, r24
  VAR(StatusType, AUTOMATIC)  result = E_OK;

  /*  lock the kernel    */
  LOCK_KERNEL()
     3f0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <tpl_get_task_lock>

  /* check interrupts are not disabled by user    */
  CHECK_INTERRUPT_LOCK(result)
     3f4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <tpl_get_interrupt_lock_status>

#if TASK_COUNT > 0
  IF_NO_EXTENDED_ERROR(result)
    /* the activate count is decreased
     */
    tpl_kern.running->activate_count--;
     3f8:	e0 91 8c 01 	lds	r30, 0x018C
     3fc:	f0 91 8d 01 	lds	r31, 0x018D
     400:	82 81       	ldd	r24, Z+2	; 0x02
     402:	81 50       	subi	r24, 0x01	; 1
     404:	82 83       	std	Z+2, r24	; 0x02

    /* activate the chained task
     */
    result = tpl_activate_task(task_id);
     406:	81 2f       	mov	r24, r17
     408:	0e 94 a6 04 	call	0x94c	; 0x94c <tpl_activate_task>
     40c:	18 2f       	mov	r17, r24

    if (result == E_OK_AND_SCHEDULE)
     40e:	80 32       	cpi	r24, 0x20	; 32
     410:	79 f4       	brne	.+30     	; 0x430 <tpl_chain_task_service+0x44>
    {
      /*  and let the scheduler do its job                            */
      TRACE_TASK_TERMINATE(tpl_kern.running_id,tpl_kern.running_id)
      tpl_schedule_from_dying();
     412:	0e 94 78 05 	call	0xaf0	; 0xaf0 <tpl_schedule_from_dying>
# if WITH_SYSTEM_CALL == NO
      if (tpl_kern.need_switch != NO_NEED_SWITCH)
     416:	80 91 90 01 	lds	r24, 0x0190
     41a:	88 23       	and	r24, r24
     41c:	81 f0       	breq	.+32     	; 0x43e <tpl_chain_task_service+0x52>
      {
        tpl_switch_context(NULL, &(tpl_kern.s_running->context));
     41e:	60 91 88 01 	lds	r22, 0x0188
     422:	70 91 89 01 	lds	r23, 0x0189
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 6b 00 	call	0xd6	; 0xd6 <tpl_switch_context>
     42e:	07 c0       	rjmp	.+14     	; 0x43e <tpl_chain_task_service+0x52>
# endif
    }
    else
    {
      /* the activate count is restored since the caller does not terminate */
      tpl_kern.running->activate_count++;
     430:	e0 91 8c 01 	lds	r30, 0x018C
     434:	f0 91 8d 01 	lds	r31, 0x018D
     438:	82 81       	ldd	r24, Z+2	; 0x02
     43a:	8f 5f       	subi	r24, 0xFF	; 255
     43c:	82 83       	std	Z+2, r24	; 0x02
#endif

  PROCESS_ERROR(result)

  /*  unlock the task structures  */
  UNLOCK_KERNEL()
     43e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <tpl_release_task_lock>

  return result;
}
     442:	81 2f       	mov	r24, r17
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <tpl_terminate_task_service>:
  return result;
}


FUNC(StatusType, OS_CODE) tpl_terminate_task_service(void)
{
     448:	1f 93       	push	r17
  /*  init the error to no error  */
  VAR(StatusType, AUTOMATIC) result = E_OK;

  /*  lock the kernel    */
  LOCK_KERNEL()
     44a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <tpl_get_task_lock>

  /* check interrupts are not disabled by user    */
  CHECK_INTERRUPT_LOCK(result)
     44e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <tpl_get_interrupt_lock_status>
     452:	88 23       	and	r24, r24
     454:	11 f0       	breq	.+4      	; 0x45a <tpl_terminate_task_service+0x12>
     456:	13 e1       	ldi	r17, 0x13	; 19
     458:	01 c0       	rjmp	.+2      	; 0x45c <tpl_terminate_task_service+0x14>
     45a:	10 e0       	ldi	r17, 0x00	; 0

#if TASK_COUNT > 0
  IF_NO_EXTENDED_ERROR(result)
    /*  the activate count is decreased
     */
    tpl_kern.running->activate_count--;
     45c:	e0 91 8c 01 	lds	r30, 0x018C
     460:	f0 91 8d 01 	lds	r31, 0x018D
     464:	82 81       	ldd	r24, Z+2	; 0x02
     466:	81 50       	subi	r24, 0x01	; 1
     468:	82 83       	std	Z+2, r24	; 0x02

    /*  and let the scheduler do its job
     */
    TRACE_TASK_TERMINATE(tpl_kern.running_id,tpl_kern.running_id)
    tpl_schedule_from_dying();
     46a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <tpl_schedule_from_dying>
# if WITH_SYSTEM_CALL == NO
    if (tpl_kern.need_switch != NO_NEED_SWITCH)
     46e:	80 91 90 01 	lds	r24, 0x0190
     472:	88 23       	and	r24, r24
     474:	41 f0       	breq	.+16     	; 0x486 <tpl_terminate_task_service+0x3e>
    {
      tpl_switch_context(
     476:	60 91 88 01 	lds	r22, 0x0188
     47a:	70 91 89 01 	lds	r23, 0x0189
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 6b 00 	call	0xd6	; 0xd6 <tpl_switch_context>
#endif

  PROCESS_ERROR(result)

  /*  unlock the kernel  */
  UNLOCK_KERNEL()
     486:	0e 94 8f 06 	call	0xd1e	; 0xd1e <tpl_release_task_lock>

  return result;
}
     48a:	81 2f       	mov	r24, r17
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <tpl_enable_counters>:
 */
STATIC VAR(tpl_bool, OS_VAR) tpl_counters_enabled = FALSE;

FUNC(void, OS_CODE) tpl_enable_counters(void)
{
    tpl_counters_enabled = TRUE;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 2d 03 	sts	0x032D, r24
}
     496:	08 95       	ret

00000498 <tpl_insert_time_obj>:
 * and a time object is inserted starting from the
 * head of the list
 */
FUNC(void, OS_CODE) tpl_insert_time_obj(
    P2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA) time_obj)
{
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	bc 01       	movw	r22, r24
    /*  get the counter                                                     */
    P2VAR(tpl_counter, AUTOMATIC, OS_APPL_DATA)
        counter = time_obj->stat_part->counter;
     4aa:	dc 01       	movw	r26, r24
     4ac:	ed 91       	ld	r30, X+
     4ae:	fc 91       	ld	r31, X
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	c0 80       	ld	r12, Z
     4b4:	d1 80       	ldd	r13, Z+1	; 0x01
    /*  initialize the current time object to the head                      */
    P2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)
        current_to = counter->first_to;
     4b6:	f6 01       	movw	r30, r12
     4b8:	c4 89       	ldd	r28, Z+20	; 0x14
     4ba:	d5 89       	ldd	r29, Z+21	; 0x15
    /*  initialize the time object that precede the current one to NULL     */
    P2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)
        prev_to = NULL_PTR;

    if (current_to == NULL)
     4bc:	20 97       	sbiw	r28, 0x00	; 0
     4be:	49 f0       	breq	.+18     	; 0x4d2 <tpl_insert_time_obj+0x3a>
    }
    else
    {
        /*  The time object queue is not empty
            look for the place to insert the alarm                          */
        while ((current_to != NULL) &&
     4c0:	1a 96       	adiw	r26, 0x0a	; 10
     4c2:	ed 90       	ld	r14, X+
     4c4:	fd 90       	ld	r15, X+
     4c6:	0d 91       	ld	r16, X+
     4c8:	1c 91       	ld	r17, X
     4ca:	1d 97       	sbiw	r26, 0x0d	; 13
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	15 c0       	rjmp	.+42     	; 0x4fc <tpl_insert_time_obj+0x64>

    if (current_to == NULL)
    {
        /*  The time object queue is empty
            So the time object is alone in the queue                        */
        counter->first_to = time_obj;
     4d2:	d6 01       	movw	r26, r12
     4d4:	55 96       	adiw	r26, 0x15	; 21
     4d6:	9c 93       	st	X, r25
     4d8:	8e 93       	st	-X, r24
     4da:	54 97       	sbiw	r26, 0x14	; 20
        counter->next_to = time_obj;
     4dc:	57 96       	adiw	r26, 0x17	; 23
     4de:	9c 93       	st	X, r25
     4e0:	8e 93       	st	-X, r24
     4e2:	56 97       	sbiw	r26, 0x16	; 22
        time_obj->next_to = time_obj->prev_to = NULL;
     4e4:	fc 01       	movw	r30, r24
     4e6:	15 82       	std	Z+5, r1	; 0x05
     4e8:	14 82       	std	Z+4, r1	; 0x04
     4ea:	13 82       	std	Z+3, r1	; 0x03
     4ec:	12 82       	std	Z+2, r1	; 0x02
     4ee:	5f c0       	rjmp	.+190    	; 0x5ae <tpl_insert_time_obj+0x116>
            look for the place to insert the alarm                          */
        while ((current_to != NULL) &&
               (current_to->date <= time_obj->date))
        {
            prev_to = current_to;
            current_to = current_to->next_to;
     4f0:	ea 81       	ldd	r30, Y+2	; 0x02
     4f2:	fb 81       	ldd	r31, Y+3	; 0x03
     4f4:	9e 01       	movw	r18, r28
    }
    else
    {
        /*  The time object queue is not empty
            look for the place to insert the alarm                          */
        while ((current_to != NULL) &&
     4f6:	30 97       	sbiw	r30, 0x00	; 0
     4f8:	59 f0       	breq	.+22     	; 0x510 <tpl_insert_time_obj+0x78>
     4fa:	ef 01       	movw	r28, r30
     4fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     4fe:	9b 85       	ldd	r25, Y+11	; 0x0b
     500:	ac 85       	ldd	r26, Y+12	; 0x0c
     502:	bd 85       	ldd	r27, Y+13	; 0x0d
     504:	e8 16       	cp	r14, r24
     506:	f9 06       	cpc	r15, r25
     508:	0a 07       	cpc	r16, r26
     50a:	1b 07       	cpc	r17, r27
     50c:	88 f7       	brcc	.-30     	; 0x4f0 <tpl_insert_time_obj+0x58>
     50e:	fe 01       	movw	r30, r28
        {
            prev_to = current_to;
            current_to = current_to->next_to;
        }

        time_obj->next_to = current_to;
     510:	db 01       	movw	r26, r22
     512:	13 96       	adiw	r26, 0x03	; 3
     514:	fc 93       	st	X, r31
     516:	ee 93       	st	-X, r30
     518:	12 97       	sbiw	r26, 0x02	; 2
        time_obj->prev_to = prev_to;
     51a:	15 96       	adiw	r26, 0x05	; 5
     51c:	3c 93       	st	X, r19
     51e:	2e 93       	st	-X, r18
     520:	14 97       	sbiw	r26, 0x04	; 4

        /*  insert the alarm    */
        if (current_to != NULL)
     522:	30 97       	sbiw	r30, 0x00	; 0
     524:	11 f0       	breq	.+4      	; 0x52a <tpl_insert_time_obj+0x92>
        {
            current_to->prev_to = time_obj;
     526:	75 83       	std	Z+5, r23	; 0x05
     528:	64 83       	std	Z+4, r22	; 0x04
        }
        if (prev_to != NULL)
     52a:	21 15       	cp	r18, r1
     52c:	31 05       	cpc	r19, r1
     52e:	21 f0       	breq	.+8      	; 0x538 <tpl_insert_time_obj+0xa0>
        {
            /*  add at the end of the queue or insert                       */
            prev_to->next_to = time_obj;
     530:	f9 01       	movw	r30, r18
     532:	73 83       	std	Z+3, r23	; 0x03
     534:	62 83       	std	Z+2, r22	; 0x02
     536:	05 c0       	rjmp	.+10     	; 0x542 <tpl_insert_time_obj+0xaa>
        else
        {
            /*  the condition current_to->date <= time_object->date was
                false a the beginning of the while. So the time object
                have to be added at the head of the time object queue       */
            counter->first_to = time_obj;
     538:	d6 01       	movw	r26, r12
     53a:	55 96       	adiw	r26, 0x15	; 21
     53c:	7c 93       	st	X, r23
     53e:	6e 93       	st	-X, r22
     540:	54 97       	sbiw	r26, 0x14	; 20

        /*  Update the next_to to point to the newly
            inserted time_object if the date of the newly inserted time
            object is within the current date and the next_alarm_to_raise
            date, taking account the modulo                                 */
        if (counter->next_to->date < counter->current_date)
     542:	d6 01       	movw	r26, r12
     544:	56 96       	adiw	r26, 0x16	; 22
     546:	ed 91       	ld	r30, X+
     548:	fc 91       	ld	r31, X
     54a:	57 97       	sbiw	r26, 0x17	; 23
     54c:	e2 84       	ldd	r14, Z+10	; 0x0a
     54e:	f3 84       	ldd	r15, Z+11	; 0x0b
     550:	04 85       	ldd	r16, Z+12	; 0x0c
     552:	15 85       	ldd	r17, Z+13	; 0x0d
     554:	50 96       	adiw	r26, 0x10	; 16
     556:	8d 91       	ld	r24, X+
     558:	9d 91       	ld	r25, X+
     55a:	0d 90       	ld	r0, X+
     55c:	bc 91       	ld	r27, X
     55e:	a0 2d       	mov	r26, r0
     560:	fb 01       	movw	r30, r22
     562:	22 85       	ldd	r18, Z+10	; 0x0a
     564:	33 85       	ldd	r19, Z+11	; 0x0b
     566:	44 85       	ldd	r20, Z+12	; 0x0c
     568:	55 85       	ldd	r21, Z+13	; 0x0d
     56a:	e8 16       	cp	r14, r24
     56c:	f9 06       	cpc	r15, r25
     56e:	0a 07       	cpc	r16, r26
     570:	1b 07       	cpc	r17, r27
     572:	80 f4       	brcc	.+32     	; 0x594 <tpl_insert_time_obj+0xfc>
        {
            if ((time_obj->date > counter->current_date) ||
     574:	82 17       	cp	r24, r18
     576:	93 07       	cpc	r25, r19
     578:	a4 07       	cpc	r26, r20
     57a:	b5 07       	cpc	r27, r21
     57c:	28 f0       	brcs	.+10     	; 0x588 <tpl_insert_time_obj+0xf0>
     57e:	2e 15       	cp	r18, r14
     580:	3f 05       	cpc	r19, r15
     582:	40 07       	cpc	r20, r16
     584:	51 07       	cpc	r21, r17
     586:	98 f4       	brcc	.+38     	; 0x5ae <tpl_insert_time_obj+0x116>
                (time_obj->date < counter->next_to->date))
            {
                counter->next_to = time_obj;
     588:	d6 01       	movw	r26, r12
     58a:	57 96       	adiw	r26, 0x17	; 23
     58c:	7c 93       	st	X, r23
     58e:	6e 93       	st	-X, r22
     590:	56 97       	sbiw	r26, 0x16	; 22
     592:	0d c0       	rjmp	.+26     	; 0x5ae <tpl_insert_time_obj+0x116>
            }
        }
        else
        {
            if ((time_obj->date > counter->current_date) &&
     594:	82 17       	cp	r24, r18
     596:	93 07       	cpc	r25, r19
     598:	a4 07       	cpc	r26, r20
     59a:	b5 07       	cpc	r27, r21
     59c:	40 f4       	brcc	.+16     	; 0x5ae <tpl_insert_time_obj+0x116>
     59e:	2e 15       	cp	r18, r14
     5a0:	3f 05       	cpc	r19, r15
     5a2:	40 07       	cpc	r20, r16
     5a4:	51 07       	cpc	r21, r17
     5a6:	18 f4       	brcc	.+6      	; 0x5ae <tpl_insert_time_obj+0x116>
                (time_obj->date < counter->next_to->date))
            {
                counter->next_to = time_obj;
     5a8:	f6 01       	movw	r30, r12
     5aa:	77 8b       	std	Z+23, r23	; 0x17
     5ac:	66 8b       	std	Z+22, r22	; 0x16
            }
        }
    }
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	08 95       	ret

000005c0 <tpl_counter_tick>:
 */
extern FUNC(void, OS_CODE) printrl(P2VAR(char, AUTOMATIC, OS_APPL_DATA) msg);

FUNC(tpl_status, OS_CODE) tpl_counter_tick(
  P2VAR(tpl_counter, AUTOMATIC, OS_APPL_DATA) counter)
{
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	8c 01       	movw	r16, r24
  /* this variable is added because the same name was used twice in this function for
   2 different variables, this behavior was dependent on the compiler */
  VAR(tpl_tick, AUTOMATIC)                      new_date;
  VAR(tpl_status, AUTOMATIC)                    need_resched = NO_SPECIAL_CODE;

  if (tpl_counters_enabled)
     5d0:	80 91 2d 03 	lds	r24, 0x032D
     5d4:	88 23       	and	r24, r24
     5d6:	09 f4       	brne	.+2      	; 0x5da <tpl_counter_tick+0x1a>
     5d8:	ca c0       	rjmp	.+404    	; 0x76e <tpl_counter_tick+0x1ae>
  {
    /*  inc the current tick value of the counter     */
    counter->current_tick++;
     5da:	f8 01       	movw	r30, r16
     5dc:	84 85       	ldd	r24, Z+12	; 0x0c
     5de:	95 85       	ldd	r25, Z+13	; 0x0d
     5e0:	a6 85       	ldd	r26, Z+14	; 0x0e
     5e2:	b7 85       	ldd	r27, Z+15	; 0x0f
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	a1 1d       	adc	r26, r1
     5e8:	b1 1d       	adc	r27, r1
     5ea:	84 87       	std	Z+12, r24	; 0x0c
     5ec:	95 87       	std	Z+13, r25	; 0x0d
     5ee:	a6 87       	std	Z+14, r26	; 0x0e
     5f0:	b7 87       	std	Z+15, r27	; 0x0f
    /*  if tickperbase is reached, the counter is inc */
    if (counter->current_tick == counter->ticks_per_base)
     5f2:	20 81       	ld	r18, Z
     5f4:	31 81       	ldd	r19, Z+1	; 0x01
     5f6:	42 81       	ldd	r20, Z+2	; 0x02
     5f8:	53 81       	ldd	r21, Z+3	; 0x03
     5fa:	82 17       	cp	r24, r18
     5fc:	93 07       	cpc	r25, r19
     5fe:	a4 07       	cpc	r26, r20
     600:	b5 07       	cpc	r27, r21
     602:	09 f0       	breq	.+2      	; 0x606 <tpl_counter_tick+0x46>
     604:	b4 c0       	rjmp	.+360    	; 0x76e <tpl_counter_tick+0x1ae>
    {
      date = counter->current_date;
     606:	20 89       	ldd	r18, Z+16	; 0x10
     608:	31 89       	ldd	r19, Z+17	; 0x11
     60a:	42 89       	ldd	r20, Z+18	; 0x12
     60c:	53 89       	ldd	r21, Z+19	; 0x13
      date++;
     60e:	2f 5f       	subi	r18, 0xFF	; 255
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	4f 4f       	sbci	r20, 0xFF	; 255
     614:	5f 4f       	sbci	r21, 0xFF	; 255
      if (date > counter->max_allowed_value)
     616:	84 81       	ldd	r24, Z+4	; 0x04
     618:	95 81       	ldd	r25, Z+5	; 0x05
     61a:	a6 81       	ldd	r26, Z+6	; 0x06
     61c:	b7 81       	ldd	r27, Z+7	; 0x07
     61e:	82 17       	cp	r24, r18
     620:	93 07       	cpc	r25, r19
     622:	a4 07       	cpc	r26, r20
     624:	b5 07       	cpc	r27, r21
     626:	20 f4       	brcc	.+8      	; 0x630 <tpl_counter_tick+0x70>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
      {
        date = 0;
      }
      counter->current_date = date;
     630:	d8 01       	movw	r26, r16
     632:	50 96       	adiw	r26, 0x10	; 16
     634:	2d 93       	st	X+, r18
     636:	3d 93       	st	X+, r19
     638:	4d 93       	st	X+, r20
     63a:	5c 93       	st	X, r21
     63c:	53 97       	sbiw	r26, 0x13	; 19
      counter->current_tick = 0;
     63e:	f8 01       	movw	r30, r16
     640:	14 86       	std	Z+12, r1	; 0x0c
     642:	15 86       	std	Z+13, r1	; 0x0d
     644:	16 86       	std	Z+14, r1	; 0x0e
     646:	17 86       	std	Z+15, r1	; 0x0f
      
      TRACE_COUNTER(counter)
      
      /*  check if the counter has reached the
       next alarm activation date                  */
      t_obj = counter->next_to;
     648:	66 89       	ldd	r22, Z+22	; 0x16
     64a:	77 89       	ldd	r23, Z+23	; 0x17
      
      if ((t_obj != NULL) && (t_obj->date == date))
     64c:	61 15       	cp	r22, r1
     64e:	71 05       	cpc	r23, r1
     650:	09 f4       	brne	.+2      	; 0x654 <tpl_counter_tick+0x94>
     652:	8d c0       	rjmp	.+282    	; 0x76e <tpl_counter_tick+0x1ae>
     654:	fb 01       	movw	r30, r22
     656:	82 85       	ldd	r24, Z+10	; 0x0a
     658:	93 85       	ldd	r25, Z+11	; 0x0b
     65a:	a4 85       	ldd	r26, Z+12	; 0x0c
     65c:	b5 85       	ldd	r27, Z+13	; 0x0d
     65e:	82 17       	cp	r24, r18
     660:	93 07       	cpc	r25, r19
     662:	a4 07       	cpc	r26, r20
     664:	b5 07       	cpc	r27, r21
     666:	09 f0       	breq	.+2      	; 0x66a <tpl_counter_tick+0xaa>
     668:	82 c0       	rjmp	.+260    	; 0x76e <tpl_counter_tick+0x1ae>
     66a:	7b 01       	movw	r14, r22
			}
            t_obj = t_obj->next_to;
#else
			object = TRUE;
			last_to = t_obj;
			t_obj = t_obj->next_to;
     66c:	d7 01       	movw	r26, r14
     66e:	12 96       	adiw	r26, 0x02	; 2
     670:	cd 91       	ld	r28, X+
     672:	dc 91       	ld	r29, X
     674:	13 97       	sbiw	r26, 0x03	; 3
#endif /* WITH_AUTOSAR */
    }
    while ((t_obj != NULL) && (t_obj->date == date));
     676:	20 97       	sbiw	r28, 0x00	; 0
     678:	59 f0       	breq	.+22     	; 0x690 <tpl_counter_tick+0xd0>
     67a:	8a 85       	ldd	r24, Y+10	; 0x0a
     67c:	9b 85       	ldd	r25, Y+11	; 0x0b
     67e:	ac 85       	ldd	r26, Y+12	; 0x0c
     680:	bd 85       	ldd	r27, Y+13	; 0x0d
     682:	82 17       	cp	r24, r18
     684:	93 07       	cpc	r25, r19
     686:	a4 07       	cpc	r26, r20
     688:	b5 07       	cpc	r27, r21
     68a:	11 f4       	brne	.+4      	; 0x690 <tpl_counter_tick+0xd0>
     68c:	7e 01       	movw	r14, r28
     68e:	ee cf       	rjmp	.-36     	; 0x66c <tpl_counter_tick+0xac>

    /*  disconnect the chain of object(s). */
    t_obj = first_to->prev_to;
     690:	db 01       	movw	r26, r22
     692:	14 96       	adiw	r26, 0x04	; 4
     694:	ed 91       	ld	r30, X+
     696:	fc 91       	ld	r31, X
     698:	15 97       	sbiw	r26, 0x05	; 5
    af_to = last_to->next_to;
    if (t_obj != NULL)
     69a:	30 97       	sbiw	r30, 0x00	; 0
     69c:	11 f0       	breq	.+4      	; 0x6a2 <tpl_counter_tick+0xe2>
    {
      t_obj->next_to = af_to;
     69e:	d3 83       	std	Z+3, r29	; 0x03
     6a0:	c2 83       	std	Z+2, r28	; 0x02
    }
    if (af_to != NULL)
     6a2:	20 97       	sbiw	r28, 0x00	; 0
     6a4:	11 f0       	breq	.+4      	; 0x6aa <tpl_counter_tick+0xea>
    {
      af_to->prev_to = t_obj;
     6a6:	fd 83       	std	Y+5, r31	; 0x05
     6a8:	ec 83       	std	Y+4, r30	; 0x04
    }

    /*  if first_to is also the first_to of the queue, update the
        first_to of the counter                     */
    if (counter->first_to == first_to)
     6aa:	f8 01       	movw	r30, r16
     6ac:	84 89       	ldd	r24, Z+20	; 0x14
     6ae:	95 89       	ldd	r25, Z+21	; 0x15
     6b0:	86 17       	cp	r24, r22
     6b2:	97 07       	cpc	r25, r23
     6b4:	11 f4       	brne	.+4      	; 0x6ba <tpl_counter_tick+0xfa>
    {
      counter->first_to = af_to;
     6b6:	d5 8b       	std	Z+21, r29	; 0x15
     6b8:	c4 8b       	std	Z+20, r28	; 0x14
		   else, return NULL
		 */

		if (object == TRUE)
		{
			real_next_to = counter->next_to;
     6ba:	d8 01       	movw	r26, r16
     6bc:	56 96       	adiw	r26, 0x16	; 22
     6be:	ed 91       	ld	r30, X+
     6c0:	fc 91       	ld	r31, X
     6c2:	57 97       	sbiw	r26, 0x17	; 23
		}
		
		/*  update the next_to of the counter           */
		if (af_to != NULL) 
     6c4:	20 97       	sbiw	r28, 0x00	; 0
     6c6:	29 f0       	breq	.+10     	; 0x6d2 <tpl_counter_tick+0x112>
		{
			counter->next_to = af_to;
     6c8:	57 96       	adiw	r26, 0x17	; 23
     6ca:	dc 93       	st	X, r29
     6cc:	ce 93       	st	-X, r28
     6ce:	56 97       	sbiw	r26, 0x16	; 22
     6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <tpl_counter_tick+0x124>
		}
		else
		{
			counter->next_to = counter->first_to;
     6d2:	d8 01       	movw	r26, r16
     6d4:	54 96       	adiw	r26, 0x14	; 20
     6d6:	8d 91       	ld	r24, X+
     6d8:	9c 91       	ld	r25, X
     6da:	55 97       	sbiw	r26, 0x15	; 21
     6dc:	57 96       	adiw	r26, 0x17	; 23
     6de:	9c 93       	st	X, r25
     6e0:	8e 93       	st	-X, r24
     6e2:	56 97       	sbiw	r26, 0x16	; 22
		}
		/*  update the end of the chain of object(s)    */
    last_to->next_to = NULL;
     6e4:	d7 01       	movw	r26, r14
     6e6:	13 96       	adiw	r26, 0x03	; 3
     6e8:	1c 92       	st	X, r1
     6ea:	1e 92       	st	-X, r1
     6ec:	12 97       	sbiw	r26, 0x02	; 2
         table has been BOOTSTRAP, don't process
         the expiry point(s))								*/
        
        real_next_to_temp = tpl_remove_timeobj_set(counter);
        
        if( real_next_to_temp != NULL)
     6ee:	30 97       	sbiw	r30, 0x00	; 0
     6f0:	f1 f1       	breq	.+124    	; 0x76e <tpl_counter_tick+0x1ae>
     6f2:	ef 01       	movw	r28, r30
     6f4:	ff 24       	eor	r15, r15
          
          /*launch time objects' actions*/
          do
          { 
            /*  get the next one                        */
            tpl_time_obj *next_to = t_obj->next_to;
     6f6:	ea 80       	ldd	r14, Y+2	; 0x02
     6f8:	db 80       	ldd	r13, Y+3	; 0x03
            expire = t_obj->stat_part->expire;
            need_resched |=
     6fa:	e8 81       	ld	r30, Y
     6fc:	f9 81       	ldd	r31, Y+1	; 0x01
     6fe:	02 80       	ldd	r0, Z+2	; 0x02
     700:	f3 81       	ldd	r31, Z+3	; 0x03
     702:	e0 2d       	mov	r30, r0
     704:	ce 01       	movw	r24, r28
     706:	09 95       	icall
     708:	80 7e       	andi	r24, 0xE0	; 224
     70a:	f8 2a       	or	r15, r24
            (TRAMPOLINE_STATUS_MASK & expire(t_obj));
            /*  rearm the alarm if needed               */
            
            if (t_obj->cycle != 0)
     70c:	8e 81       	ldd	r24, Y+6	; 0x06
     70e:	9f 81       	ldd	r25, Y+7	; 0x07
     710:	a8 85       	ldd	r26, Y+8	; 0x08
     712:	b9 85       	ldd	r27, Y+9	; 0x09
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	a1 05       	cpc	r26, r1
     718:	b1 05       	cpc	r27, r1
     71a:	11 f1       	breq	.+68     	; 0x760 <tpl_counter_tick+0x1a0>
            {
              /*  if the cycle is not 0, the new date
               is computed by adding the cycle to
               the current date                      */
              new_date = t_obj->date + t_obj->cycle;
     71c:	2a 85       	ldd	r18, Y+10	; 0x0a
     71e:	3b 85       	ldd	r19, Y+11	; 0x0b
     720:	4c 85       	ldd	r20, Y+12	; 0x0c
     722:	5d 85       	ldd	r21, Y+13	; 0x0d
     724:	28 0f       	add	r18, r24
     726:	39 1f       	adc	r19, r25
     728:	4a 1f       	adc	r20, r26
     72a:	5b 1f       	adc	r21, r27
              if (new_date > counter->max_allowed_value)
     72c:	f8 01       	movw	r30, r16
     72e:	84 81       	ldd	r24, Z+4	; 0x04
     730:	95 81       	ldd	r25, Z+5	; 0x05
     732:	a6 81       	ldd	r26, Z+6	; 0x06
     734:	b7 81       	ldd	r27, Z+7	; 0x07
     736:	82 17       	cp	r24, r18
     738:	93 07       	cpc	r25, r19
     73a:	a4 07       	cpc	r26, r20
     73c:	b5 07       	cpc	r27, r21
     73e:	40 f4       	brcc	.+16     	; 0x750 <tpl_counter_tick+0x190>
              {
                new_date -= (counter->max_allowed_value + 1);
     740:	80 95       	com	r24
     742:	90 95       	com	r25
     744:	a0 95       	com	r26
     746:	b0 95       	com	r27
     748:	28 0f       	add	r18, r24
     74a:	39 1f       	adc	r19, r25
     74c:	4a 1f       	adc	r20, r26
     74e:	5b 1f       	adc	r21, r27
              }
              t_obj->date = new_date;  
     750:	2a 87       	std	Y+10, r18	; 0x0a
     752:	3b 87       	std	Y+11, r19	; 0x0b
     754:	4c 87       	std	Y+12, r20	; 0x0c
     756:	5d 87       	std	Y+13, r21	; 0x0d
              
              /*  and the alarm is put back in the alarm
               queue of the counter it belongs to    */
              tpl_insert_time_obj(t_obj);
     758:	ce 01       	movw	r24, r28
     75a:	0e 94 4c 02 	call	0x498	; 0x498 <tpl_insert_time_obj>
     75e:	01 c0       	rjmp	.+2      	; 0x762 <tpl_counter_tick+0x1a2>
            }
            else {
              t_obj->state = TIME_OBJ_SLEEP;
     760:	1e 86       	std	Y+14, r1	; 0x0e
     762:	8e 2d       	mov	r24, r14
     764:	9d 2d       	mov	r25, r13
     766:	ec 01       	movw	r28, r24
            }
            t_obj = next_to;
          } while (t_obj != NULL);
     768:	20 97       	sbiw	r28, 0x00	; 0
     76a:	29 f6       	brne	.-118    	; 0x6f6 <tpl_counter_tick+0x136>
     76c:	01 c0       	rjmp	.+2      	; 0x770 <tpl_counter_tick+0x1b0>
     76e:	ff 24       	eor	r15, r15
        }
      }
    }
  }
  return need_resched;
}
     770:	8f 2d       	mov	r24, r15
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	08 95       	ret

00000782 <tpl_get_proc>:
  DOW_ASSERT(tpl_fifo_rw[tpl_h_prio].size > 0)
	
  DOW_DO(printrl("tpl_get_exec_object - avant");)

  /*  Get the highest priority non empty fifo                         */
  highest = tpl_ready_list[tpl_h_prio].fifo;
     782:	50 91 91 01 	lds	r21, 0x0191
     786:	25 2f       	mov	r18, r21
     788:	33 27       	eor	r19, r19
     78a:	27 fd       	sbrc	r18, 7
     78c:	30 95       	com	r19

  /*  Get the read index                                              */
  read_idx = tpl_fifo_rw[tpl_h_prio].read;
     78e:	d9 01       	movw	r26, r18
     790:	aa 0f       	add	r26, r26
     792:	bb 1f       	adc	r27, r27
     794:	fd 01       	movw	r30, r26
     796:	ec 5c       	subi	r30, 0xCC	; 204
     798:	fc 4f       	sbci	r31, 0xFC	; 252
     79a:	80 81       	ld	r24, Z

  /*  The fifo is not empty, get the descriptor                       */
  elected = highest[read_idx];
     79c:	a2 0f       	add	r26, r18
     79e:	b3 1f       	adc	r27, r19
     7a0:	ab 5f       	subi	r26, 0xFB	; 251
     7a2:	bc 4f       	sbci	r27, 0xFC	; 252
     7a4:	ed 91       	ld	r30, X+
     7a6:	fc 91       	ld	r31, X
     7a8:	11 97       	sbiw	r26, 0x01	; 1
     7aa:	e8 0f       	add	r30, r24
     7ac:	f1 1d       	adc	r31, r1
     7ae:	60 81       	ld	r22, Z

  /*  Adjust the read index and the size                              */
  read_idx++;
     7b0:	48 2f       	mov	r20, r24
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
  if (read_idx >= tpl_ready_list[tpl_h_prio].size)
     7b4:	12 96       	adiw	r26, 0x02	; 2
     7b6:	8c 91       	ld	r24, X
     7b8:	48 17       	cp	r20, r24
     7ba:	08 f0       	brcs	.+2      	; 0x7be <tpl_get_proc+0x3c>
     7bc:	40 e0       	ldi	r20, 0x00	; 0
  {
    read_idx = 0;
  }
  tpl_fifo_rw[tpl_h_prio].read = read_idx;
     7be:	c9 01       	movw	r24, r18
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	fc 01       	movw	r30, r24
     7c6:	ec 5c       	subi	r30, 0xCC	; 204
     7c8:	fc 4f       	sbci	r31, 0xFC	; 252
     7ca:	40 83       	st	Z, r20
  tpl_fifo_rw[tpl_h_prio].size--;
     7cc:	21 81       	ldd	r18, Z+1	; 0x01
     7ce:	21 50       	subi	r18, 0x01	; 1
     7d0:	21 83       	std	Z+1, r18	; 0x01
     7d2:	25 2f       	mov	r18, r21
     7d4:	fc 01       	movw	r30, r24
     7d6:	eb 5c       	subi	r30, 0xCB	; 203
     7d8:	fc 4f       	sbci	r31, 0xFC	; 252
     7da:	92 2f       	mov	r25, r18

  /*  Adjust the highest priority non empty fifo index                */
  while ((tpl_h_prio >= 0) && (tpl_fifo_rw[tpl_h_prio].size == 0))
     7dc:	27 ff       	sbrs	r18, 7
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <tpl_get_proc+0x64>
     7e0:	20 93 91 01 	sts	0x0191, r18
     7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <tpl_get_proc+0x72>
     7e6:	80 81       	ld	r24, Z
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	32 97       	sbiw	r30, 0x02	; 2
     7ec:	88 23       	and	r24, r24
     7ee:	a9 f3       	breq	.-22     	; 0x7da <tpl_get_proc+0x58>
     7f0:	90 93 91 01 	sts	0x0191, r25
  }

  DOW_DO(printrl("tpl_get_exec_object - apres");)

  return elected;
}
     7f4:	86 2f       	mov	r24, r22
     7f6:	08 95       	ret

000007f8 <tpl_put_preempted_proc>:

  DOW_DO(printrl("tpl_put_prempted_exec_object - avant");)

  /*  the priority used as level in the ready list
      for a preempted object is the current priority                  */
  prio = tpl_dyn_proc_table[proc_id]->priority;
     7f8:	e8 2f       	mov	r30, r24
     7fa:	ff 27       	eor	r31, r31
     7fc:	e7 fd       	sbrc	r30, 7
     7fe:	f0 95       	com	r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	e8 52       	subi	r30, 0x28	; 40
     806:	fd 4f       	sbci	r31, 0xFD	; 253
     808:	01 90       	ld	r0, Z+
     80a:	f0 81       	ld	r31, Z
     80c:	e0 2d       	mov	r30, r0
     80e:	53 81       	ldd	r21, Z+3	; 0x03
  DOW_ASSERT(tpl_fifo_rw[prio].size < tpl_ready_list[prio].size)

  DOW_DO(size_before = tpl_fifo_rw[prio].size;)

  /*  a preempted executable object is put at the head of the fifo    */
  write_idx = tpl_fifo_rw[prio].read - 1 ;
     810:	25 2f       	mov	r18, r21
     812:	33 27       	eor	r19, r19
     814:	27 fd       	sbrc	r18, 7
     816:	30 95       	com	r19
     818:	f9 01       	movw	r30, r18
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	df 01       	movw	r26, r30
     820:	ac 5c       	subi	r26, 0xCC	; 204
     822:	bc 4f       	sbci	r27, 0xFC	; 252
     824:	9c 91       	ld	r25, X
     826:	91 50       	subi	r25, 0x01	; 1

  /*  since write_idx is unsigned, an overflow could occur            */
  if (write_idx >= tpl_ready_list[prio].size) {
     828:	e2 0f       	add	r30, r18
     82a:	f3 1f       	adc	r31, r19
     82c:	eb 5f       	subi	r30, 0xFB	; 251
     82e:	fc 4f       	sbci	r31, 0xFC	; 252
     830:	42 81       	ldd	r20, Z+2	; 0x02
     832:	94 17       	cp	r25, r20
     834:	10 f0       	brcs	.+4      	; 0x83a <tpl_put_preempted_proc+0x42>
    write_idx = tpl_ready_list[prio].size - 1;
     836:	94 2f       	mov	r25, r20
     838:	91 50       	subi	r25, 0x01	; 1
  }
  tpl_fifo_rw[prio].read = write_idx;
     83a:	f9 01       	movw	r30, r18
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	df 01       	movw	r26, r30
     842:	ac 5c       	subi	r26, 0xCC	; 204
     844:	bc 4f       	sbci	r27, 0xFC	; 252
     846:	9c 93       	st	X, r25

  /*  Get the corresponding fifo                                      */
  fifo = tpl_ready_list[prio].fifo;

  /*  put the executable object in it                                 */
  fifo[write_idx] = proc_id ;
     848:	e2 0f       	add	r30, r18
     84a:	f3 1f       	adc	r31, r19
     84c:	eb 5f       	subi	r30, 0xFB	; 251
     84e:	fc 4f       	sbci	r31, 0xFC	; 252
     850:	01 90       	ld	r0, Z+
     852:	f0 81       	ld	r31, Z
     854:	e0 2d       	mov	r30, r0
     856:	e9 0f       	add	r30, r25
     858:	f1 1d       	adc	r31, r1
     85a:	80 83       	st	Z, r24

  /* adjust the size                                                  */
  tpl_fifo_rw[prio].size++;
     85c:	11 96       	adiw	r26, 0x01	; 1
     85e:	8c 91       	ld	r24, X
     860:	11 97       	sbiw	r26, 0x01	; 1
     862:	8f 5f       	subi	r24, 0xFF	; 255
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	8c 93       	st	X, r24

  DOW_ASSERT(tpl_fifo_rw[prio].size == (size_before + 1));

  /* adjust the highest priority non empty fifo                       */
  if (prio > tpl_h_prio) {
     868:	80 91 91 01 	lds	r24, 0x0191
     86c:	85 17       	cp	r24, r21
     86e:	14 f4       	brge	.+4      	; 0x874 <tpl_put_preempted_proc+0x7c>
    tpl_h_prio = prio;
     870:	50 93 91 01 	sts	0x0191, r21
     874:	08 95       	ret

00000876 <tpl_put_new_proc>:
 *
 * @param proc_id   id of the process
 */
FUNC(void, OS_CODE) tpl_put_new_proc(
  CONST(tpl_proc_id, AUTOMATIC) proc_id)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	38 2f       	mov	r19, r24

  DOW_DO(printrl("tpl_put_new_exec_object - avant");)

  /*  the priority used as level in the ready list
      for a newly activated object is the base priority */
  prio = tpl_stat_proc_table[proc_id]->base_priority ;
     87c:	e8 2f       	mov	r30, r24
     87e:	ff 27       	eor	r31, r31
     880:	e7 fd       	sbrc	r30, 7
     882:	f0 95       	com	r31
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 53       	subi	r30, 0x3E	; 62
     88a:	fd 4f       	sbci	r31, 0xFD	; 253
     88c:	01 90       	ld	r0, Z+
     88e:	f0 81       	ld	r31, Z
     890:	e0 2d       	mov	r30, r0
     892:	23 85       	ldd	r18, Z+11	; 0x0b

  DOW_DO(size_before = tpl_fifo_rw[prio].size;)

  /*  a newly activated executable object
      is put at the end of the fifo                     */
  write_idx = tpl_fifo_rw[prio].read + tpl_fifo_rw[prio].size;
     894:	c2 2f       	mov	r28, r18
     896:	dd 27       	eor	r29, r29
     898:	c7 fd       	sbrc	r28, 7
     89a:	d0 95       	com	r29
     89c:	fe 01       	movw	r30, r28
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	df 01       	movw	r26, r30
     8a4:	ac 5c       	subi	r26, 0xCC	; 204
     8a6:	bc 4f       	sbci	r27, 0xFC	; 252
     8a8:	11 96       	adiw	r26, 0x01	; 1
     8aa:	9c 91       	ld	r25, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	8c 91       	ld	r24, X
     8b0:	98 0f       	add	r25, r24

  /*  adjust the write index                            */
  if (write_idx >= tpl_ready_list[prio].size) {
     8b2:	ec 0f       	add	r30, r28
     8b4:	fd 1f       	adc	r31, r29
     8b6:	eb 5f       	subi	r30, 0xFB	; 251
     8b8:	fc 4f       	sbci	r31, 0xFC	; 252
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	98 17       	cp	r25, r24
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <tpl_put_new_proc+0x4c>
    write_idx -= tpl_ready_list[prio].size;
     8c0:	98 1b       	sub	r25, r24

  /*  Get the corresponding fifo                        */
  fifo = tpl_ready_list[prio].fifo;

  /*  put the executable object in it                   */
  fifo[write_idx] = proc_id ;
     8c2:	de 01       	movw	r26, r28
     8c4:	aa 0f       	add	r26, r26
     8c6:	bb 1f       	adc	r27, r27
     8c8:	ca 0f       	add	r28, r26
     8ca:	db 1f       	adc	r29, r27
     8cc:	cb 5f       	subi	r28, 0xFB	; 251
     8ce:	dc 4f       	sbci	r29, 0xFC	; 252
     8d0:	e8 81       	ld	r30, Y
     8d2:	f9 81       	ldd	r31, Y+1	; 0x01
     8d4:	e9 0f       	add	r30, r25
     8d6:	f1 1d       	adc	r31, r1
     8d8:	30 83       	st	Z, r19

  /* adjust the size                                    */
  tpl_fifo_rw[prio].size++;
     8da:	ac 5c       	subi	r26, 0xCC	; 204
     8dc:	bc 4f       	sbci	r27, 0xFC	; 252
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	8c 91       	ld	r24, X
     8e2:	11 97       	sbiw	r26, 0x01	; 1
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	8c 93       	st	X, r24

  DOW_ASSERT(tpl_fifo_rw[prio].size == (size_before + 1));

  /* adjust the highest priority non empty fifo         */
  if (prio > tpl_h_prio) {
     8ea:	80 91 91 01 	lds	r24, 0x0191
     8ee:	82 17       	cp	r24, r18
     8f0:	14 f4       	brge	.+4      	; 0x8f6 <tpl_put_new_proc+0x80>
    tpl_h_prio = prio;
     8f2:	20 93 91 01 	sts	0x0191, r18
  }

  DOW_DO(printrl("tpl_put_new_exec_object - apres");)
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <tpl_get_internal_resource>:
 *
 * @param task task from which internal resource is got
 */
FUNC(void, OS_CODE) tpl_get_internal_resource(
  CONST(tpl_proc_id, AUTOMATIC) task_id)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
  CONSTP2VAR(tpl_internal_resource, AUTOMATIC, OS_APPL_DATA) rez =
    tpl_stat_proc_table[task_id]->internal_resource;
     900:	c8 2f       	mov	r28, r24
     902:	dd 27       	eor	r29, r29
     904:	c7 fd       	sbrc	r28, 7
     906:	d0 95       	com	r29
     908:	cc 0f       	add	r28, r28
     90a:	dd 1f       	adc	r29, r29
     90c:	fe 01       	movw	r30, r28
     90e:	ee 53       	subi	r30, 0x3E	; 62
     910:	fd 4f       	sbci	r31, 0xFD	; 253
     912:	01 90       	ld	r0, Z+
     914:	f0 81       	ld	r31, Z
     916:	e0 2d       	mov	r30, r0
     918:	a0 85       	ldd	r26, Z+8	; 0x08
     91a:	b1 85       	ldd	r27, Z+9	; 0x09

  if ((rez != NULL) && (rez->taken == FALSE))
     91c:	10 97       	sbiw	r26, 0x00	; 0
     91e:	99 f0       	breq	.+38     	; 0x946 <tpl_get_internal_resource+0x4a>
     920:	12 96       	adiw	r26, 0x02	; 2
     922:	8c 91       	ld	r24, X
     924:	12 97       	sbiw	r26, 0x02	; 2
     926:	88 23       	and	r24, r24
     928:	71 f4       	brne	.+28     	; 0x946 <tpl_get_internal_resource+0x4a>
  {
    rez->taken = TRUE;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	8c 93       	st	X, r24
     930:	12 97       	sbiw	r26, 0x02	; 2
    rez->owner_prev_priority = tpl_dyn_proc_table[task_id]->priority;
     932:	c8 52       	subi	r28, 0x28	; 40
     934:	dd 4f       	sbci	r29, 0xFD	; 253
     936:	e8 81       	ld	r30, Y
     938:	f9 81       	ldd	r31, Y+1	; 0x01
     93a:	83 81       	ldd	r24, Z+3	; 0x03
     93c:	11 96       	adiw	r26, 0x01	; 1
     93e:	8c 93       	st	X, r24
     940:	11 97       	sbiw	r26, 0x01	; 1
    tpl_dyn_proc_table[task_id]->priority = rez->ceiling_priority;
     942:	8c 91       	ld	r24, X
     944:	83 83       	std	Z+3, r24	; 0x03
  }
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <tpl_activate_task>:
 *
 * @param task_id   the identifier of the task
 */
FUNC(tpl_status, OS_CODE) tpl_activate_task(
  CONST(tpl_task_id, AUTOMATIC) task_id)
{
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	28 2f       	mov	r18, r24
  VAR(tpl_status, AUTOMATIC)                              result = E_OS_LIMIT;
  CONSTP2VAR(tpl_proc, AUTOMATIC, OS_APPL_DATA)           task =
    tpl_dyn_proc_table[task_id];
     952:	e8 2f       	mov	r30, r24
     954:	ff 27       	eor	r31, r31
     956:	e7 fd       	sbrc	r30, 7
     958:	f0 95       	com	r31
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	df 01       	movw	r26, r30
     960:	a8 52       	subi	r26, 0x28	; 40
     962:	bd 4f       	sbci	r27, 0xFD	; 253
     964:	cd 91       	ld	r28, X+
     966:	dc 91       	ld	r29, X
#if  WITH_AUTOSAR_TIMING_PROTECTION == YES
  /*  if this is the first activation in the time frame                 */
  if (task->activation_allowed == TRUE)
  {
#endif
    if (task->activate_count < s_task->max_activate_count)
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	ee 53       	subi	r30, 0x3E	; 62
     96c:	fd 4f       	sbci	r31, 0xFD	; 253
     96e:	01 90       	ld	r0, Z+
     970:	f0 81       	ld	r31, Z
     972:	e0 2d       	mov	r30, r0
     974:	84 85       	ldd	r24, Z+12	; 0x0c
     976:	98 17       	cp	r25, r24
     978:	10 f0       	brcs	.+4      	; 0x97e <tpl_activate_task+0x32>
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	0b c0       	rjmp	.+22     	; 0x994 <tpl_activate_task+0x48>
    {
      if (task->activate_count == 0)
     97e:	99 23       	and	r25, r25
     980:	11 f4       	brne	.+4      	; 0x986 <tpl_activate_task+0x3a>
      {
        /*  the initialization is postponed to the time it will
            get the CPU as indicated by READY_AND_NEW state             */
        TRACE_TASK_ACTIVATE(task_id)

        task->state = (tpl_proc_state)READY_AND_NEW;
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	8c 83       	std	Y+4, r24	; 0x04
        }
#endif

      }
      /*  put it in the list                                            */
      tpl_put_new_proc(task_id);
     986:	82 2f       	mov	r24, r18
     988:	0e 94 3b 04 	call	0x876	; 0x876 <tpl_put_new_proc>
      /*  inc the task activation count. When the task will terminate
          it will dec this count and if not zero it will be reactivated */
      task->activate_count++;
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	8a 83       	std	Y+2, r24	; 0x02
     992:	80 e2       	ldi	r24, 0x20	; 32
    result = (tpl_status)E_OS_PROTECTION_TIME;
    tpl_call_protection_hook(E_OS_PROTECTION_TIME);
  }
#endif
  return result;
}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <tpl_call_terminate_isr2_service>:
{
  /*  init the error to no error  */
  VAR(StatusType, AUTOMATIC) result = E_OK;
  
  /*  lock the task structures    */
  LOCK_KERNEL()
     99a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <tpl_get_task_lock>
  
  /* enable interrupts if disabled */
  if (FALSE != tpl_get_interrupt_lock_status() )  
     99e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <tpl_get_interrupt_lock_status>
     9a2:	88 23       	and	r24, r24
     9a4:	11 f0       	breq	.+4      	; 0x9aa <tpl_call_terminate_isr2_service+0x10>
  {
    tpl_reset_interrupt_lock_status();
     9a6:	0e 94 08 01 	call	0x210	; 0x210 <tpl_reset_interrupt_lock_status>
    /*tpl_enable_interrupts(); now ?? or wait until TerminateISR reschedule and interrupts enabled returning previous API service call OR by signal_handler.*/
    result = E_OS_DISABLEDINT;
  }
  /* release resources if held */
  if( (tpl_kern.running->resources) != NULL ){
     9aa:	e0 91 8c 01 	lds	r30, 0x018C
     9ae:	f0 91 8d 01 	lds	r31, 0x018D
     9b2:	80 81       	ld	r24, Z
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	89 2b       	or	r24, r25
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <tpl_call_terminate_isr2_service+0x28>
    tpl_release_all_resources(tpl_kern.running_id);
     9ba:	80 91 8e 01 	lds	r24, 0x018E
     9be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <tpl_release_all_resources>
    result = E_OS_RESOURCE;
  }
  
  PROCESS_ERROR(result);  /* store terminateISR service id before hook ?*/

  tpl_terminate_isr2_service();
     9c2:	0e 94 b0 01 	call	0x360	; 0x360 <tpl_terminate_isr2_service>
  
  /*  unlock the task structures  */
  UNLOCK_KERNEL()
     9c6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <tpl_release_task_lock>
  
}
     9ca:	08 95       	ret

000009cc <tpl_init_os>:
 * @internal
 *
 * Initialization of Trampoline
 */
FUNC(void, OS_CODE) tpl_init_os(CONST(tpl_application_mode, AUTOMATIC) app_mode)
{
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
#if (WITH_AUTOSAR == YES) && (ALARM_COUNT == 0) && (SCHEDTABLE_COUNT > 0)
  P2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA) auto_time_obj;
#endif

  /*  Start the idle task */
  result = tpl_activate_task(IDLE_TASK_ID);
     9d2:	8a e0       	ldi	r24, 0x0A	; 10
     9d4:	0e 94 a6 04 	call	0x94c	; 0x94c <tpl_activate_task>
     9d8:	c8 ed       	ldi	r28, 0xD8	; 216
     9da:	d2 e0       	ldi	r29, 0x02	; 2
     9dc:	10 e0       	ldi	r17, 0x00	; 0
  
#if TASK_COUNT > 0
  /*  Look for autostart tasks    */
  for (i = 0; i < TASK_COUNT; i++)
  {
    if (tpl_dyn_proc_table[i]->state == (tpl_proc_state)AUTOSTART)
     9de:	e8 81       	ld	r30, Y
     9e0:	f9 81       	ldd	r31, Y+1	; 0x01
     9e2:	84 81       	ldd	r24, Z+4	; 0x04
     9e4:	84 30       	cpi	r24, 0x04	; 4
     9e6:	19 f4       	brne	.+6      	; 0x9ee <tpl_init_os+0x22>
    {
      /*  each AUTOSTART task is activated   */
      result = tpl_activate_task(i);
     9e8:	81 2f       	mov	r24, r17
     9ea:	0e 94 a6 04 	call	0x94c	; 0x94c <tpl_activate_task>
     9ee:	22 96       	adiw	r28, 0x02	; 2
     9f0:	1f 5f       	subi	r17, 0xFF	; 255
  /*  Start the idle task */
  result = tpl_activate_task(IDLE_TASK_ID);
  
#if TASK_COUNT > 0
  /*  Look for autostart tasks    */
  for (i = 0; i < TASK_COUNT; i++)
     9f2:	14 30       	cpi	r17, 0x04	; 4
     9f4:	a1 f7       	brne	.-24     	; 0x9de <tpl_init_os+0x12>

  /*  Look for autostart alarms    */

  for (i = 0; i < ALARM_COUNT; i++)
  {
    auto_time_obj =
     9f6:	e0 91 03 03 	lds	r30, 0x0303
     9fa:	f0 91 04 03 	lds	r31, 0x0304
      (P2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA))tpl_alarm_table[i];
    if (auto_time_obj->state == (tpl_time_obj_state)ALARM_AUTOSTART)
     9fe:	86 85       	ldd	r24, Z+14	; 0x0e
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	29 f4       	brne	.+10     	; 0xa0e <tpl_init_os+0x42>
    {
      auto_time_obj->state = ALARM_ACTIVE;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	86 87       	std	Z+14, r24	; 0x0e
      tpl_insert_time_obj(auto_time_obj);
     a08:	cf 01       	movw	r24, r30
     a0a:	0e 94 4c 02 	call	0x498	; 0x498 <tpl_insert_time_obj>
      }
#endif
    }
  }
#endif
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	08 95       	ret

00000a16 <tpl_init_proc>:
 */
FUNC(void, OS_CODE) tpl_init_proc(
    CONST(tpl_proc_id, AUTOMATIC) proc_id)
{
  CONSTP2VAR(tpl_proc, AUTOMATIC, OS_APPL_DATA) dyn =
    tpl_dyn_proc_table[proc_id];
     a16:	e8 2f       	mov	r30, r24
     a18:	ff 27       	eor	r31, r31
     a1a:	e7 fd       	sbrc	r30, 7
     a1c:	f0 95       	com	r31
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	df 01       	movw	r26, r30
     a24:	a8 52       	subi	r26, 0x28	; 40
     a26:	bd 4f       	sbci	r27, 0xFD	; 253
     a28:	0d 90       	ld	r0, X+
     a2a:	bc 91       	ld	r27, X
     a2c:	a0 2d       	mov	r26, r0

  /*  The priority is set to the base priority of the executable object */
  dyn->priority = tpl_stat_proc_table[proc_id]->base_priority;
     a2e:	ee 53       	subi	r30, 0x3E	; 62
     a30:	fd 4f       	sbci	r31, 0xFD	; 253
     a32:	01 90       	ld	r0, Z+
     a34:	f0 81       	ld	r31, Z
     a36:	e0 2d       	mov	r30, r0
     a38:	93 85       	ldd	r25, Z+11	; 0x0b
     a3a:	13 96       	adiw	r26, 0x03	; 3
     a3c:	9c 93       	st	X, r25
     a3e:	13 97       	sbiw	r26, 0x03	; 3
  /*  set the resources list to NULL                                    */
  dyn->resources = NULL;
     a40:	1d 92       	st	X+, r1
     a42:	1c 92       	st	X, r1
  /*  context init is machine dependant
      tpl_init_context is declared in tpl_machine_interface.h           */
  tpl_init_context(proc_id);
     a44:	0e 94 57 06 	call	0xcae	; 0xcae <tpl_init_context>
}
     a48:	08 95       	ret

00000a4a <tpl_start_scheduling>:
 * @internal
 *
 * TODO: document this
 */
FUNC(void, OS_CODE) tpl_start_scheduling(void)
{
     a4a:	1f 93       	push	r17
  CONST(tpl_proc_id, AUTOMATIC) first_proc = tpl_get_proc();
     a4c:	0e 94 c1 03 	call	0x782	; 0x782 <tpl_get_proc>
     a50:	18 2f       	mov	r17, r24
  tpl_kern.running_id = first_proc;
     a52:	e8 2f       	mov	r30, r24
     a54:	ff 27       	eor	r31, r31
     a56:	e7 fd       	sbrc	r30, 7
     a58:	f0 95       	com	r31
     a5a:	f0 93 8f 01 	sts	0x018F, r31
     a5e:	e0 93 8e 01 	sts	0x018E, r30
  tpl_kern.running = tpl_dyn_proc_table[first_proc];
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	df 01       	movw	r26, r30
     a68:	a8 52       	subi	r26, 0x28	; 40
     a6a:	bd 4f       	sbci	r27, 0xFD	; 253
     a6c:	8d 91       	ld	r24, X+
     a6e:	9c 91       	ld	r25, X
     a70:	90 93 8d 01 	sts	0x018D, r25
     a74:	80 93 8c 01 	sts	0x018C, r24
  tpl_kern.s_running = tpl_stat_proc_table[first_proc];
     a78:	ee 53       	subi	r30, 0x3E	; 62
     a7a:	fd 4f       	sbci	r31, 0xFD	; 253
     a7c:	80 81       	ld	r24, Z
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	90 93 89 01 	sts	0x0189, r25
     a84:	80 93 88 01 	sts	0x0188, r24
  
  /*  the object has not be preempted. So its
   descriptor must be initialized                                  */
  tpl_init_proc(first_proc);
     a88:	81 2f       	mov	r24, r17
     a8a:	0e 94 0b 05 	call	0xa16	; 0xa16 <tpl_init_proc>
#endif /* WITH_AUTOSAR_TIMING_PROTECTION */

  /*  the inserted task become RUNNING                                  */
  TRACE_ISR_RUN(first_proc)
  TRACE_TASK_EXECUTE(first_proc)
  tpl_kern.running->state = RUNNING;
     a8e:	e0 91 8c 01 	lds	r30, 0x018C
     a92:	f0 91 8d 01 	lds	r31, 0x018D
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	84 83       	std	Z+4, r24	; 0x04
  /*  If an internal resource is assigned to the task
   and it is not already taken by it, take it                        */
  tpl_get_internal_resource(first_proc);
     a9a:	81 2f       	mov	r24, r17
     a9c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <tpl_get_internal_resource>
  
  /*  A new task has been elected. It is time to call PreTaskHook while
   the rescheduled task is running                                   */
  CALL_PRE_TASK_HOOK()
  
  tpl_kern.need_switch = NEED_SWITCH;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 90 01 	sts	0x0190, r24
}
     aa6:	1f 91       	pop	r17
     aa8:	08 95       	ret

00000aaa <tpl_start_os_service>:
  return app_mode;
}

FUNC(void, OS_CODE) tpl_start_os_service(
  CONST(tpl_application_mode, AUTOMATIC) mode)
{
     aaa:	1f 93       	push	r17
     aac:	18 2f       	mov	r17, r24
  /*  lock the kernel    */
  LOCK_KERNEL()
     aae:	0e 94 8d 06 	call	0xd1a	; 0xd1a <tpl_get_task_lock>

  /*  store information for error hook routine    */
  STORE_SERVICE(OSServiceId_StartOS)
	
  application_mode = mode;
     ab2:	10 93 33 03 	sts	0x0333, r17
  tpl_init_timing_protection();
#endif

  TRACE_TPL_INIT()

  tpl_init_os(mode);
     ab6:	81 2f       	mov	r24, r17
     ab8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <tpl_init_os>
    
  tpl_enable_counters();
     abc:	0e 94 48 02 	call	0x490	; 0x490 <tpl_enable_counters>
  /*  Call the startup hook. According to the spec, it should be called
	  after the os is initialized and before the scheduler is running     */
  CALL_STARTUP_HOOK()

  /*  Call tpl_schedule to elect the greatest priority task */
  if(tpl_h_prio != -1)
     ac0:	80 91 91 01 	lds	r24, 0x0191
     ac4:	8f 3f       	cpi	r24, 0xFF	; 255
     ac6:	81 f0       	breq	.+32     	; 0xae8 <tpl_start_os_service+0x3e>
  {
    tpl_start_scheduling();
     ac8:	0e 94 25 05 	call	0xa4a	; 0xa4a <tpl_start_scheduling>

#if WITH_SYSTEM_CALL == NO
	if (tpl_kern.need_switch != NO_NEED_SWITCH)
     acc:	80 91 90 01 	lds	r24, 0x0190
     ad0:	88 23       	and	r24, r24
     ad2:	51 f0       	breq	.+20     	; 0xae8 <tpl_start_os_service+0x3e>
	{
	  tpl_switch_context(
     ad4:	60 91 88 01 	lds	r22, 0x0188
     ad8:	70 91 89 01 	lds	r23, 0x0189
     adc:	80 91 86 01 	lds	r24, 0x0186
     ae0:	90 91 87 01 	lds	r25, 0x0187
     ae4:	0e 94 6b 00 	call	0xd6	; 0xd6 <tpl_switch_context>
	}
#endif
  }
	
  /*  unlock the kernel  */
  UNLOCK_KERNEL()
     ae8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <tpl_release_task_lock>
}
     aec:	1f 91       	pop	r17
     aee:	08 95       	ret

00000af0 <tpl_schedule_from_dying>:
 * This function is called by the OSEK/VDX TerminateTask, ChainTask,
 * and by the function TerminateISR
 *
 */
FUNC(void, OS_CODE) tpl_schedule_from_dying(void)
{
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
 */
FUNC(void, OS_CODE) tpl_release_internal_resource(
    CONST(tpl_proc_id, AUTOMATIC) task_id)
{
  CONSTP2VAR(tpl_internal_resource, AUTOMATIC, OS_APPL_DATA) rez =
    tpl_stat_proc_table[task_id]->internal_resource;
     af4:	80 91 8e 01 	lds	r24, 0x018E
     af8:	c8 2f       	mov	r28, r24
     afa:	dd 27       	eor	r29, r29
     afc:	c7 fd       	sbrc	r28, 7
     afe:	d0 95       	com	r29
     b00:	cc 0f       	add	r28, r28
     b02:	dd 1f       	adc	r29, r29
     b04:	fe 01       	movw	r30, r28
     b06:	ee 53       	subi	r30, 0x3E	; 62
     b08:	fd 4f       	sbci	r31, 0xFD	; 253
     b0a:	01 90       	ld	r0, Z+
     b0c:	f0 81       	ld	r31, Z
     b0e:	e0 2d       	mov	r30, r0
     b10:	a0 85       	ldd	r26, Z+8	; 0x08
     b12:	b1 85       	ldd	r27, Z+9	; 0x09

  if ((rez != NULL) && (rez->taken == TRUE))
     b14:	10 97       	sbiw	r26, 0x00	; 0
     b16:	79 f0       	breq	.+30     	; 0xb36 <tpl_schedule_from_dying+0x46>
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	8c 91       	ld	r24, X
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	51 f4       	brne	.+20     	; 0xb36 <tpl_schedule_from_dying+0x46>
  {
    rez->taken = FALSE;
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	1c 92       	st	X, r1
     b26:	12 97       	sbiw	r26, 0x02	; 2
    tpl_dyn_proc_table[task_id]->priority = rez->owner_prev_priority;
     b28:	c8 52       	subi	r28, 0x28	; 40
     b2a:	dd 4f       	sbci	r29, 0xFD	; 253
     b2c:	e8 81       	ld	r30, Y
     b2e:	f9 81       	ldd	r31, Y+1	; 0x01
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	8c 91       	ld	r24, X
     b34:	83 83       	std	Z+3, r24	; 0x03
  /*  the task loses the CPU because it has been put in the WAITING or
   in the DYING state, its internal resource is released.              */
  tpl_release_internal_resource(tpl_kern.running_id);

  /*  and checked to compute its state.                                 */
  if (tpl_kern.running->activate_count > 0)
     b36:	e0 91 8c 01 	lds	r30, 0x018C
     b3a:	f0 91 8d 01 	lds	r31, 0x018D
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	88 23       	and	r24, r24
     b42:	19 f0       	breq	.+6      	; 0xb4a <tpl_schedule_from_dying+0x5a>
  {
    /*  there is at least one instance of the dying running object in
        the ready list. So it is put in the READY_AND_NEW state. This
        way when the next instance will be prepared to run it will
        be initialized.                                                 */
    tpl_kern.running->state = READY_AND_NEW;
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	84 83       	std	Z+4, r24	; 0x04
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <tpl_schedule_from_dying+0x5c>
  }
  else
  {
    /*  there is no instance of the dying running object in the ready
        list. So it is put in the SUSPENDED state.                      */
    tpl_kern.running->state = SUSPENDED;
     b4a:	14 82       	std	Z+4, r1	; 0x04
  }

  /*  copy it in old slot of tpl_kern                           */
  tpl_kern.old = tpl_kern.running;
     b4c:	f0 93 8b 01 	sts	0x018B, r31
     b50:	e0 93 8a 01 	sts	0x018A, r30
  tpl_kern.s_old = tpl_kern.s_running;
     b54:	80 91 88 01 	lds	r24, 0x0188
     b58:	90 91 89 01 	lds	r25, 0x0189
     b5c:	90 93 87 01 	sts	0x0187, r25
     b60:	80 93 86 01 	sts	0x0186, r24
  /*  get the ready task from the ready task list                       */
  tpl_kern.running_id = tpl_get_proc();
     b64:	0e 94 c1 03 	call	0x782	; 0x782 <tpl_get_proc>
     b68:	28 2f       	mov	r18, r24
     b6a:	e8 2f       	mov	r30, r24
     b6c:	ff 27       	eor	r31, r31
     b6e:	e7 fd       	sbrc	r30, 7
     b70:	f0 95       	com	r31
     b72:	f0 93 8f 01 	sts	0x018F, r31
     b76:	e0 93 8e 01 	sts	0x018E, r30
  tpl_kern.running = tpl_dyn_proc_table[tpl_kern.running_id];
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	df 01       	movw	r26, r30
     b80:	a8 52       	subi	r26, 0x28	; 40
     b82:	bd 4f       	sbci	r27, 0xFD	; 253
     b84:	0d 90       	ld	r0, X+
     b86:	bc 91       	ld	r27, X
     b88:	a0 2d       	mov	r26, r0
     b8a:	b0 93 8d 01 	sts	0x018D, r27
     b8e:	a0 93 8c 01 	sts	0x018C, r26
  tpl_kern.s_running = tpl_stat_proc_table[tpl_kern.running_id];
     b92:	ee 53       	subi	r30, 0x3E	; 62
     b94:	fd 4f       	sbci	r31, 0xFD	; 253
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	90 93 89 01 	sts	0x0189, r25
     b9e:	80 93 88 01 	sts	0x0188, r24

  if (tpl_kern.running->state == READY_AND_NEW)
     ba2:	14 96       	adiw	r26, 0x04	; 4
     ba4:	8c 91       	ld	r24, X
     ba6:	85 30       	cpi	r24, 0x05	; 5
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <tpl_schedule_from_dying+0xc0>
  {
    /*  the object has not be preempted. So its
        descriptor must be initialized                                  */
    tpl_init_proc(tpl_kern.running_id);
     baa:	82 2f       	mov	r24, r18
     bac:	0e 94 0b 05 	call	0xa16	; 0xa16 <tpl_init_proc>
#endif /* WITH_AUTOSAR_TIMING_PROTECTION */
  }
  /*  the inserted task become RUNNING                                  */
  TRACE_ISR_RUN(tpl_kern.running_id)
  TRACE_TASK_EXECUTE(tpl_kern.running_id)
  tpl_kern.running->state = RUNNING;
     bb0:	e0 91 8c 01 	lds	r30, 0x018C
     bb4:	f0 91 8d 01 	lds	r31, 0x018D
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	84 83       	std	Z+4, r24	; 0x04
  /*  If an internal resource is assigned to the task
      and it is not already taken by it, take it                        */
  tpl_get_internal_resource(tpl_kern.running_id);
     bbc:	80 91 8e 01 	lds	r24, 0x018E
     bc0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <tpl_get_internal_resource>

  /*  A new task has been elected. It is time to call PreTaskHook while
      the rescheduled task is running                                   */
  CALL_PRE_TASK_HOOK()

  tpl_kern.need_switch = NEED_SWITCH;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	80 93 90 01 	sts	0x0190, r24
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <tpl_schedule_from_running>:

#if WITH_AUTOSAR_STACK_MONITORING == YES
  tpl_check_stack (tpl_kern.running_id);
#endif /* WITH_AUTOSAR_STACK_MONITORING */

  if (tpl_h_prio > tpl_kern.running->priority)
     bd0:	e0 91 8c 01 	lds	r30, 0x018C
     bd4:	f0 91 8d 01 	lds	r31, 0x018D
     bd8:	90 91 91 01 	lds	r25, 0x0191
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	89 17       	cp	r24, r25
     be0:	14 f0       	brlt	.+4      	; 0xbe6 <tpl_schedule_from_running+0x16>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	47 c0       	rjmp	.+142    	; 0xc74 <tpl_schedule_from_running+0xa4>
    /*  a task switch will occur. It is time to call the
        PostTaskHook while the soon descheduled task is running   */
    CALL_POST_TASK_HOOK()

    /*  the current running task become READY                     */
    tpl_kern.running->state = (tpl_proc_state)READY;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	84 83       	std	Z+4, r24	; 0x04
    /*  put the running task in the ready task list               */
    /*  Bug fix. preempted objects are put at the head of the
        set while newly activated objects are put at the end of
        the set. So we have to distinguish them                   */
    tpl_put_preempted_proc(tpl_kern.running_id);
     bea:	80 91 8e 01 	lds	r24, 0x018E
     bee:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <tpl_put_preempted_proc>
    /*  copy it in old slot of tpl_kern                           */
    tpl_kern.old = tpl_kern.running;
     bf2:	80 91 8c 01 	lds	r24, 0x018C
     bf6:	90 91 8d 01 	lds	r25, 0x018D
     bfa:	90 93 8b 01 	sts	0x018B, r25
     bfe:	80 93 8a 01 	sts	0x018A, r24
    tpl_kern.s_old = tpl_kern.s_running;
     c02:	80 91 88 01 	lds	r24, 0x0188
     c06:	90 91 89 01 	lds	r25, 0x0189
     c0a:	90 93 87 01 	sts	0x0187, r25
     c0e:	80 93 86 01 	sts	0x0186, r24
    tpl_pause_budget_monitor(tpl_kern.running_id);
#endif /* WITH_AUTOSAR_TIMING_PROTECTION */


    /*  get the ready task from the ready task list               */
    tpl_kern.running_id = tpl_get_proc();
     c12:	0e 94 c1 03 	call	0x782	; 0x782 <tpl_get_proc>
     c16:	28 2f       	mov	r18, r24
     c18:	e8 2f       	mov	r30, r24
     c1a:	ff 27       	eor	r31, r31
     c1c:	e7 fd       	sbrc	r30, 7
     c1e:	f0 95       	com	r31
     c20:	f0 93 8f 01 	sts	0x018F, r31
     c24:	e0 93 8e 01 	sts	0x018E, r30
    tpl_kern.running = tpl_dyn_proc_table[tpl_kern.running_id];
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	df 01       	movw	r26, r30
     c2e:	a8 52       	subi	r26, 0x28	; 40
     c30:	bd 4f       	sbci	r27, 0xFD	; 253
     c32:	0d 90       	ld	r0, X+
     c34:	bc 91       	ld	r27, X
     c36:	a0 2d       	mov	r26, r0
     c38:	b0 93 8d 01 	sts	0x018D, r27
     c3c:	a0 93 8c 01 	sts	0x018C, r26
    tpl_kern.s_running = tpl_stat_proc_table[tpl_kern.running_id];
     c40:	ee 53       	subi	r30, 0x3E	; 62
     c42:	fd 4f       	sbci	r31, 0xFD	; 253
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	90 93 89 01 	sts	0x0189, r25
     c4c:	80 93 88 01 	sts	0x0188, r24

      TRACE_ISR_PREEMPT(tpl_kern)
      TRACE_TASK_PREEMPT(tpl_kern)

    if (tpl_kern.running->state == READY_AND_NEW)
     c50:	14 96       	adiw	r26, 0x04	; 4
     c52:	8c 91       	ld	r24, X
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	19 f4       	brne	.+6      	; 0xc5e <tpl_schedule_from_running+0x8e>
    {
      /*  the object has not be preempted. So its
          descriptor must be initialized                          */
      tpl_init_proc(tpl_kern.running_id);
     c58:	82 2f       	mov	r24, r18
     c5a:	0e 94 0b 05 	call	0xa16	; 0xa16 <tpl_init_proc>
#endif /* WITH_AUTOSAR_TIMING_PROTECTION */

    /*  the inserted task become RUNNING                          */
    TRACE_TASK_EXECUTE(tpl_kern.running_id)
    TRACE_ISR_RUN(tpl_kern.running_id)
    tpl_kern.running->state = RUNNING;
     c5e:	e0 91 8c 01 	lds	r30, 0x018C
     c62:	f0 91 8d 01 	lds	r31, 0x018D
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	84 83       	std	Z+4, r24	; 0x04
    /*  If an internal resource is assigned to the task
        and it is not already taken by it, take it                */
    tpl_get_internal_resource(tpl_kern.running_id);
     c6a:	80 91 8e 01 	lds	r24, 0x018E
     c6e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <tpl_get_internal_resource>
     c72:	83 e0       	ldi	r24, 0x03	; 3
    CALL_PRE_TASK_HOOK()

    need_switch = NEED_SWITCH | NEED_SAVE;
  }

  tpl_kern.need_switch = need_switch;
     c74:	80 93 90 01 	sts	0x0190, r24
}
     c78:	08 95       	ret

00000c7a <tpl_action_activate_task>:
  /*  store information for error hook routine    */
  STORE_SERVICE(OSServiceId_ActivateTask)
  STORE_TASK_ID(((P2CONST(tpl_task_activation_action, AUTOMATIC, OS_APPL_CONST))action)->task_id)
	
  /* call alarm action and save return value to launch error hook if alarm action goes wrong */
  result_action = tpl_activate_task( ((P2CONST(tpl_task_activation_action, AUTOMATIC, OS_APPL_CONST))action)->task_id);
     c7a:	fc 01       	movw	r30, r24
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	0e 94 a6 04 	call	0x94c	; 0x94c <tpl_activate_task>
	
  PROCESS_ERROR(result_action)
	
  return result_action;
}
     c82:	08 95       	ret

00000c84 <CallTerminateISR2>:
  tpl_call_terminate_task_service();
}

FUNC(void, OS_CODE) CallTerminateISR2(void)
{
  tpl_call_terminate_isr2_service();
     c84:	0e 94 cd 04 	call	0x99a	; 0x99a <tpl_call_terminate_isr2_service>
}
     c88:	08 95       	ret

00000c8a <StartOS>:
 * StartOS can be called by the app to start the OS in
 * an appropriate mode.
 */
FUNC(void, OS_CODE) StartOS(
  CONST(AppModeType, AUTOMATIC) mode)
{
     c8a:	1f 93       	push	r17
     c8c:	18 2f       	mov	r17, r24
  tpl_init_machine();  
     c8e:	0e 94 91 06 	call	0xd22	; 0xd22 <tpl_init_machine>
 * an appropriate mode.
 */
FUNC(void, OS_CODE) tpl_start_os(
    CONST(AppModeType, AUTOMATIC) mode)
{
  tpl_start_os_service(mode);
     c92:	81 2f       	mov	r24, r17
     c94:	0e 94 55 05 	call	0xaaa	; 0xaaa <tpl_start_os_service>
{
  tpl_init_machine();  
  tpl_start_os(mode);
  /*  tpl_start_os does not return since the idle task will run
      if no other task is AUTOSTART */
}
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <ChainTask>:


FUNC(StatusType, OS_CODE) ChainTask(
    CONST(TaskType, AUTOMATIC) task_id)
{
    return OSEK_STATUS_MASK & tpl_chain_task_service(task_id);
     c9c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <tpl_chain_task_service>
}
     ca0:	8f 71       	andi	r24, 0x1F	; 31
     ca2:	08 95       	ret

00000ca4 <TerminateTask>:
}


FUNC(StatusType, OS_CODE) TerminateTask(void)
{
    return OSEK_STATUS_MASK & tpl_terminate_task_service();
     ca4:	0e 94 24 02 	call	0x448	; 0x448 <tpl_terminate_task_service>
}
     ca8:	8f 71       	andi	r24, 0x1F	; 31
     caa:	08 95       	ret

00000cac <tpl_sleep>:

/*
 * tpl_sleep is used by the idle task
 */
void tpl_sleep(void)
{
     cac:	ff cf       	rjmp	.-2      	; 0xcac <tpl_sleep>

00000cae <tpl_init_context>:
 * can be the running one!!!)
 */
FUNC(void, OS_CODE) tpl_init_context(
    CONST(tpl_proc_id, OS_APPL_DATA) proc_id)
//void tpl_init_context(tpl_task *task)
{
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29

    int a=0; /*internal variable, used to put the register R00 to R31 on the tabular*/
	u8 *pointer;
  	/* Gets a pointer to the static descriptor of the task whose context is going to be initialized */
	const tpl_proc_static *static_desc = tpl_stat_proc_table[proc_id];
     cb2:	e8 2f       	mov	r30, r24
     cb4:	ff 27       	eor	r31, r31
     cb6:	e7 fd       	sbrc	r30, 7
     cb8:	f0 95       	com	r31
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	ee 53       	subi	r30, 0x3E	; 62
     cc0:	fd 4f       	sbci	r31, 0xFD	; 253
     cc2:	a0 81       	ld	r26, Z
     cc4:	b1 81       	ldd	r27, Z+1	; 0x01
	/* Init stack pointer */
	u8 *sp=(void *)((u16)(static_desc->stack.stack_zone) + static_desc->stack.stack_size - 1);
     cc6:	14 96       	adiw	r26, 0x04	; 4
     cc8:	8d 91       	ld	r24, X+
     cca:	9c 91       	ld	r25, X
     ccc:	15 97       	sbiw	r26, 0x05	; 5
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	12 96       	adiw	r26, 0x02	; 2
     cd2:	ed 91       	ld	r30, X+
     cd4:	fc 91       	ld	r31, X
     cd6:	13 97       	sbiw	r26, 0x03	; 3
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25

	/* put the Program Counter on the stack */
    
    *sp=(u16)static_desc->entry;
     cdc:	16 96       	adiw	r26, 0x06	; 6
     cde:	8c 91       	ld	r24, X
     ce0:	16 97       	sbiw	r26, 0x06	; 6
     ce2:	80 83       	st	Z, r24
	sp--;
	*sp=((u16)static_desc->entry>>8);
     ce4:	17 96       	adiw	r26, 0x07	; 7
     ce6:	8c 91       	ld	r24, X
     ce8:	17 97       	sbiw	r26, 0x07	; 7
     cea:	82 93       	st	-Z, r24
	sp--;
     cec:	31 97       	sbiw	r30, 0x01	; 1
	/* save the stack pointer */ 
	pointer = (u8*)(&(static_desc->context.ic->sp));
     cee:	0d 90       	ld	r0, X+
     cf0:	bc 91       	ld	r27, X
     cf2:	a0 2d       	mov	r26, r0
	*pointer = (u8)((u16)sp & 0xFF);
     cf4:	ed 01       	movw	r28, r26
     cf6:	e9 93       	st	Y+, r30
	pointer++;
	*pointer = (u8)((u16)sp >> 8);
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	fc 93       	st	X, r31
     cfc:	11 97       	sbiw	r26, 0x01	; 1
     cfe:	fd 01       	movw	r30, r26

  /* initializes system register on the chart (system register at startup time) */
    for (a=0;a<31;a++)
     d00:	cd 01       	movw	r24, r26
     d02:	4f 96       	adiw	r24, 0x1f	; 31
    {
        pointer++;
        *pointer=0x00;
     d04:	12 82       	std	Z+2, r1	; 0x02
     d06:	31 96       	adiw	r30, 0x01	; 1
	*pointer = (u8)((u16)sp & 0xFF);
	pointer++;
	*pointer = (u8)((u16)sp >> 8);

  /* initializes system register on the chart (system register at startup time) */
    for (a=0;a<31;a++)
     d08:	e8 17       	cp	r30, r24
     d0a:	f9 07       	cpc	r31, r25
     d0c:	d9 f7       	brne	.-10     	; 0xd04 <tpl_init_context+0x56>
        *pointer=0x00;
    }

    /* put the register SREG on the chart */
    pointer++;
    *pointer=0x80; /* the system register with interrupt activated */
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	88 a3       	std	Y+32, r24	; 0x20

	/* put register 16 on the chart */
	pointer++;
	*pointer=0x00;
     d12:	19 a2       	std	Y+33, r1	; 0x21
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <tpl_get_task_lock>:

void tpl_get_task_lock(void)
{
	cli();
     d1a:	f8 94       	cli
}
     d1c:	08 95       	ret

00000d1e <tpl_release_task_lock>:

void tpl_release_task_lock(void)
{
    sei();
     d1e:	78 94       	sei
}
     d20:	08 95       	ret

00000d22 <tpl_init_machine>:
void tpl_init_machine(void)
{
//	#ifndef NO_ALARM
//		tpl_init_tick_timer();
//	#endif
	sei();
     d22:	78 94       	sei
}
     d24:	08 95       	ret

00000d26 <FunctionCANButton>:
			default:
				break;
		}
		
#endif
}
     d26:	08 95       	ret

00000d28 <FunctionCANSpeed>:
	//ledsSet(value);
	//#ifdef DEBUG
	printf("ID1 Data: %d \n", value);
	//#endif
#endif
} // CC
     d28:	08 95       	ret

00000d2a <FunctionCANCCOn>:
}

//receive the status of CC
void FunctionCANCCOn(char value){
	#ifdef DEBUG
		printf("ID5 Data: %c \n", value);
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <FunctionCANCCOn+0x2>
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <FunctionCANCCOn+0x4>
     d2e:	ed b7       	in	r30, 0x3d	; 61
     d30:	fe b7       	in	r31, 0x3e	; 62
     d32:	31 96       	adiw	r30, 0x01	; 1
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	31 e0       	ldi	r19, 0x01	; 1
     d38:	ad b7       	in	r26, 0x3d	; 61
     d3a:	be b7       	in	r27, 0x3e	; 62
     d3c:	12 96       	adiw	r26, 0x02	; 2
     d3e:	3c 93       	st	X, r19
     d40:	2e 93       	st	-X, r18
     d42:	11 97       	sbiw	r26, 0x01	; 1
     d44:	82 83       	std	Z+2, r24	; 0x02
     d46:	13 82       	std	Z+3, r1	; 0x03
     d48:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
	#endif
}
     d54:	08 95       	ret

00000d56 <FunctionCANSetSpeed>:
}

//Print out the set speed via CAN
void FunctionCANSetSpeed(char value){
	#ifdef DEBUG
		printf("ID4 Data: %c \n", value);
     d56:	00 d0       	rcall	.+0      	; 0xd58 <FunctionCANSetSpeed+0x2>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <FunctionCANSetSpeed+0x4>
     d5a:	ed b7       	in	r30, 0x3d	; 61
     d5c:	fe b7       	in	r31, 0x3e	; 62
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	2f e0       	ldi	r18, 0x0F	; 15
     d62:	31 e0       	ldi	r19, 0x01	; 1
     d64:	ad b7       	in	r26, 0x3d	; 61
     d66:	be b7       	in	r27, 0x3e	; 62
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	3c 93       	st	X, r19
     d6c:	2e 93       	st	-X, r18
     d6e:	11 97       	sbiw	r26, 0x01	; 1
     d70:	82 83       	std	Z+2, r24	; 0x02
     d72:	13 82       	std	Z+3, r1	; 0x03
     d74:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
	#endif
}
     d80:	08 95       	ret

00000d82 <FunctionCANForce>:
} // CC

// print out the force received via CAN
void FunctionCANForce(uint16_t value){
	#ifdef DEBUG
		printf("ID3 Data: %d \n", value);
     d82:	00 d0       	rcall	.+0      	; 0xd84 <FunctionCANForce+0x2>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <FunctionCANForce+0x4>
     d86:	2e e1       	ldi	r18, 0x1E	; 30
     d88:	31 e0       	ldi	r19, 0x01	; 1
     d8a:	ed b7       	in	r30, 0x3d	; 61
     d8c:	fe b7       	in	r31, 0x3e	; 62
     d8e:	32 83       	std	Z+2, r19	; 0x02
     d90:	21 83       	std	Z+1, r18	; 0x01
     d92:	94 83       	std	Z+4, r25	; 0x04
     d94:	83 83       	std	Z+3, r24	; 0x03
     d96:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
	#endif
}
     da2:	08 95       	ret

00000da4 <main>:
	else
	canSend(2,c);
}

int main(void)
{	
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
	#ifdef DEBUG
		stdout = &mystdout;
     da8:	82 e9       	ldi	r24, 0x92	; 146
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	90 93 10 0f 	sts	0x0F10, r25
     db0:	80 93 0f 0f 	sts	0x0F0F, r24
		init_USART0();
     db4:	0e 94 28 09 	call	0x1250	; 0x1250 <init_USART0>
		printf("START MAIN \r");
     db8:	00 d0       	rcall	.+0      	; 0xdba <main+0x16>
     dba:	8d e2       	ldi	r24, 0x2D	; 45
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	ed b7       	in	r30, 0x3d	; 61
     dc0:	fe b7       	in	r31, 0x3e	; 62
     dc2:	92 83       	std	Z+2, r25	; 0x02
     dc4:	81 83       	std	Z+1, r24	; 0x01
     dc6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
	#endif
	

	#ifdef DEBUG
		printf("INIT USART done \r");
     dca:	8a e3       	ldi	r24, 0x3A	; 58
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	ed b7       	in	r30, 0x3d	; 61
     dd0:	fe b7       	in	r31, 0x3e	; 62
     dd2:	92 83       	std	Z+2, r25	; 0x02
     dd4:	81 83       	std	Z+1, r24	; 0x01
     dd6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
	#endif
	

	TCCR2A = 7; //timer lance, prediviseur 1024
     dda:	87 e0       	ldi	r24, 0x07	; 7
     ddc:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = 1; //interruption locale en overflow
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 70 00 	sts	0x0070, r24
		// set a default.
		rtU.DesiredSpeed1 = 80;
		rtU.activate1 =TRUE;
		
	#elif defined(WHEEL)
		pwmInit();
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0e 94 23 09 	call	0x1246	; 0x1246 <pwmInit>
		adcInit(&ADCinterrupt);
     dee:	8b e1       	ldi	r24, 0x1B	; 27
     df0:	97 e0       	ldi	r25, 0x07	; 7
     df2:	0e 94 5d 07 	call	0xeba	; 0xeba <adcInit>
		ledsInit();
     df6:	0e 94 1e 09 	call	0x123c	; 0x123c <ledsInit>
		ledsInit();
		buttonsInit(&functionLedSet);
	#endif // cc//wheel//DASHBOARD


	canInit(&FunctionCANSpeed,&FunctionCANButton,&FunctionCANForce,&FunctionCANSetSpeed,&FunctionCANCCOn);
     dfa:	84 e9       	ldi	r24, 0x94	; 148
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	63 e9       	ldi	r22, 0x93	; 147
     e00:	76 e0       	ldi	r23, 0x06	; 6
     e02:	41 ec       	ldi	r20, 0xC1	; 193
     e04:	56 e0       	ldi	r21, 0x06	; 6
     e06:	2b ea       	ldi	r18, 0xAB	; 171
     e08:	36 e0       	ldi	r19, 0x06	; 6
     e0a:	05 e9       	ldi	r16, 0x95	; 149
     e0c:	16 e0       	ldi	r17, 0x06	; 6
     e0e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <canInit>
	canSetBaud();
     e12:	0e 94 bc 07 	call	0xf78	; 0xf78 <canSetBaud>
	canInitMob();
     e16:	0e 94 c6 07 	call	0xf8c	; 0xf8c <canInitMob>
	canInitSend();
     e1a:	0e 94 08 08 	call	0x1010	; 0x1010 <canInitSend>
	canInitRecieve();
     e1e:	0e 94 0f 08 	call	0x101e	; 0x101e <canInitRecieve>
	canStart();
     e22:	0e 94 44 08 	call	0x1088	; 0x1088 <canStart>
	
    StartOS(OSDEFAULTAPPMODE);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 45 06 	call	0xc8a	; 0xc8a <StartOS>
	//ChainTask(stopCANTask);

	
    return 0;
}
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	08 95       	ret

00000e36 <ADCinterrupt>:
}
//#endif

	//when an ADC interrupt happens we change light and also send it to cruice control
	void ADCinterrupt(int c)
	{
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	18 2f       	mov	r17, r24
     e3c:	09 2f       	mov	r16, r25
		#if defined(WHEEL) || defined(DASHBOARD)
		printf("the integer is %d", c);
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <ADCinterrupt+0xa>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <ADCinterrupt+0xc>
     e42:	ed b7       	in	r30, 0x3d	; 61
     e44:	fe b7       	in	r31, 0x3e	; 62
     e46:	31 96       	adiw	r30, 0x01	; 1
     e48:	8c e4       	ldi	r24, 0x4C	; 76
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	ad b7       	in	r26, 0x3d	; 61
     e4e:	be b7       	in	r27, 0x3e	; 62
     e50:	12 96       	adiw	r26, 0x02	; 2
     e52:	9c 93       	st	X, r25
     e54:	8e 93       	st	-X, r24
     e56:	11 97       	sbiw	r26, 0x01	; 1
     e58:	12 83       	std	Z+2, r17	; 0x02
     e5a:	03 83       	std	Z+3, r16	; 0x03
     e5c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
		canSend(1,c);
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	61 2f       	mov	r22, r17
     e6c:	70 2f       	mov	r23, r16
     e6e:	0e 94 10 08 	call	0x1020	; 0x1020 <canSend>
		ledsSet(c);
     e72:	81 2f       	mov	r24, r17
     e74:	0e 94 21 09 	call	0x1242	; 0x1242 <ledsSet>
	#endif	
	}
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <periodicTask_function>:
TASK(periodicTask)
{
	#if defined(DASHBOARD)
		//nothing just receiving and displaying and sending buttons.	
	#elif defined(WHEEL)
		printf("send 1 \n");
     e7e:	8e e5       	ldi	r24, 0x5E	; 94
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	0e 94 8f 0a 	call	0x151e	; 0x151e <puts>
		// wheel needs ADC interrupt when changing potmeter
		ADCstartConversion();
     e86:	0e 94 74 07 	call	0xee8	; 0xee8 <ADCstartConversion>
			
			canSend(3,rtY.Power1);

	#endif // defined(dashboard//wheel//CC)
	
	TerminateTask();
     e8a:	0e 94 52 06 	call	0xca4	; 0xca4 <TerminateTask>
}
     e8e:	08 95       	ret

00000e90 <stopCANTask_function>:

//t_ECU this_ECU = DASHBOARD;

TASK(stopCANTask)
{
	canStop();
     e90:	0e 94 35 08 	call	0x106a	; 0x106a <canStop>
	canStart();
     e94:	0e 94 44 08 	call	0x1088	; 0x1088 <canStart>
	printf("can started again \n");
     e98:	86 e6       	ldi	r24, 0x66	; 102
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 8f 0a 	call	0x151e	; 0x151e <puts>
	TerminateTask();
     ea0:	0e 94 52 06 	call	0xca4	; 0xca4 <TerminateTask>

}
     ea4:	08 95       	ret

00000ea6 <startTask_function>:
	//TerminateTask();
}

TASK(startTask)
{
	ChainTask(secondTask);
     ea6:	80 91 34 02 	lds	r24, 0x0234
     eaa:	0e 94 4e 06 	call	0xc9c	; 0xc9c <ChainTask>
}
     eae:	08 95       	ret

00000eb0 <secondTask_function>:

TASK(secondTask)
{
	//PORTA |=2;
	//test stop
	ChainTask(stopCANTask);
     eb0:	80 91 35 02 	lds	r24, 0x0235
     eb4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <ChainTask>
	//TerminateTask();
}
     eb8:	08 95       	ret

00000eba <adcInit>:
    @return void.
*/
void adcInit(void *lp) {
	
	//enabeling ADC & enabeling trigger
	ADCSRA = ADCSRA | (1 << ADEN) | ADCSRA /*| (1 << ADATE)*/ | (1 << ADIE);
     eba:	ea e7       	ldi	r30, 0x7A	; 122
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	20 81       	ld	r18, Z
     ec0:	30 81       	ld	r19, Z
     ec2:	23 2b       	or	r18, r19
     ec4:	28 68       	ori	r18, 0x88	; 136
     ec6:	20 83       	st	Z, r18
	
	//Enabeling analog input for ADC 3 & set voltage reference
	ADMUX = ADMUX | (1 << MUX1) | ADMUX | (1 << MUX0) | ADMUX 
     ec8:	ec e7       	ldi	r30, 0x7C	; 124
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	20 81       	ld	r18, Z
     ece:	30 81       	ld	r19, Z
     ed0:	40 81       	ld	r20, Z
     ed2:	50 81       	ld	r21, Z
     ed4:	23 2b       	or	r18, r19
     ed6:	23 6c       	ori	r18, 0xC3	; 195
     ed8:	24 2b       	or	r18, r20
     eda:	25 2b       	or	r18, r21
     edc:	20 83       	st	Z, r18
	| (1 << REFS0) | ADMUX | (1 << REFS1);
	//ADCSRA = ADCSRA | 1 << ADSC;
	
	funcADC = lp;
     ede:	90 93 9a 03 	sts	0x039A, r25
     ee2:	80 93 99 03 	sts	0x0399, r24
}
     ee6:	08 95       	ret

00000ee8 <ADCstartConversion>:
    @return void
*/
void ADCstartConversion(void)
{
	//Start single conversion
	ADCSRA = ADCSRA | 1 << ADSC;
     ee8:	ea e7       	ldi	r30, 0x7A	; 122
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 64       	ori	r24, 0x40	; 64
     ef0:	80 83       	st	Z, r24
}
     ef2:	08 95       	ret

00000ef4 <adcISR1_function>:
    @param adc_vect interruption stack.
*/
ISR(adcISR1)
{
	//turn interrupt flag off
	ADCSRA |= (1<<ADIF);
     ef4:	ea e7       	ldi	r30, 0x7A	; 122
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	80 83       	st	Z, r24
	//Getting ADC data 2 bitshift right
	funcADC(ADCW>>2);
     efe:	80 91 78 00 	lds	r24, 0x0078
     f02:	90 91 79 00 	lds	r25, 0x0079
     f06:	e0 91 99 03 	lds	r30, 0x0399
     f0a:	f0 91 9a 03 	lds	r31, 0x039A
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	09 95       	icall
	//end ISR
	CallTerminateISR2();
     f18:	0e 94 42 06 	call	0xc84	; 0xc84 <CallTerminateISR2>
     f1c:	08 95       	ret

00000f1e <boutonISR7_function>:
	funcX(WEST);
	CallTerminateISR2();
}

ISR(boutonISR7) {
	funcX(SOUTH);
     f1e:	e0 91 a1 03 	lds	r30, 0x03A1
     f22:	f0 91 a2 03 	lds	r31, 0x03A2
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	09 95       	icall
	CallTerminateISR2();
     f2a:	0e 94 42 06 	call	0xc84	; 0xc84 <CallTerminateISR2>
     f2e:	08 95       	ret

00000f30 <boutonISR6_function>:
	CallTerminateISR2();
}

ISR(boutonISR6) {
	//printf("hello");
	funcX(WEST);
     f30:	e0 91 a1 03 	lds	r30, 0x03A1
     f34:	f0 91 a2 03 	lds	r31, 0x03A2
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	09 95       	icall
	CallTerminateISR2();
     f3c:	0e 94 42 06 	call	0xc84	; 0xc84 <CallTerminateISR2>
}
     f40:	08 95       	ret

00000f42 <boutonISR5_function>:
	funcX(NORTH);
	CallTerminateISR2();
}

ISR(boutonISR5) {
	funcX(EAST);
     f42:	e0 91 a1 03 	lds	r30, 0x03A1
     f46:	f0 91 a2 03 	lds	r31, 0x03A2
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	09 95       	icall
	CallTerminateISR2();
     f4e:	0e 94 42 06 	call	0xc84	; 0xc84 <CallTerminateISR2>
}
     f52:	08 95       	ret

00000f54 <boutonISR4_function>:
	CallTerminateISR2();
}


ISR(boutonISR4) {
	funcX(NORTH);
     f54:	e0 91 a1 03 	lds	r30, 0x03A1
     f58:	f0 91 a2 03 	lds	r31, 0x03A2
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	09 95       	icall
	CallTerminateISR2();
     f60:	0e 94 42 06 	call	0xc84	; 0xc84 <CallTerminateISR2>
}
     f64:	08 95       	ret

00000f66 <boutonISR1_function>:
	ISR button in real time
    @param real-time ISR-> buttonISR.
	@return void
*/
ISR(boutonISR1) {
	funcX(CENTER);
     f66:	e0 91 a1 03 	lds	r30, 0x03A1
     f6a:	f0 91 a2 03 	lds	r31, 0x03A2
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	09 95       	icall
	CallTerminateISR2();
     f72:	0e 94 42 06 	call	0xc84	; 0xc84 <CallTerminateISR2>
}
     f76:	08 95       	ret

00000f78 <canSetBaud>:
 * Fclk = 8MHz
 * baudrate = 125 kbps
 * Tq = 0.5                                                      
 */
void canSetBaud(void){
	CANBT1 = 0x06;
     f78:	86 e0       	ldi	r24, 0x06	; 6
     f7a:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2 = 0x0C; // of 0x04
     f7e:	8c e0       	ldi	r24, 0x0C	; 12
     f80:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = 0x37;
     f84:	87 e3       	ldi	r24, 0x37	; 55
     f86:	80 93 e4 00 	sts	0x00E4, r24
}
     f8a:	08 95       	ret

00000f8c <canInitMob>:
 * loopen over messages en op 0 zetten
 * * DLC3:0: Data Length Code
 *		* aantal bytes
 * * gebruik IDE: 0 ( CAN standard rev 2.0 A (identifiers length = 11 bits) )
 */
void canInitMob(void){
     f8c:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	for(i = 0; i < 15; i++) {
		CANPAGE = i << 4; //select mob
     f8e:	89 2f       	mov	r24, r25
     f90:	82 95       	swap	r24
     f92:	80 7f       	andi	r24, 0xF0	; 240
     f94:	80 93 ed 00 	sts	0x00ED, r24
		
		CANCDMOB = 0; //reset
     f98:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;
     f9c:	10 92 ee 00 	sts	0x00EE, r1
		
		//IDT, RTRTAG, RBnTAG
		CANIDT1 = 0;                        //ID
     fa0:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;
     fa4:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;
     fa8:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;
     fac:	10 92 f0 00 	sts	0x00F0, r1
		//IDMSK, IDEMSK, RTRMSK
		CANIDM1 = 0;                        //get all messages
     fb0:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;                        //1 = check bit
     fb4:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;                        //0 = ignore bit
     fb8:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0; //(1<<IDEMSK); 		// do not ignore standard frames
     fbc:	10 92 f4 00 	sts	0x00F4, r1
		CANMSG = 0;
     fc0:	10 92 fa 00 	sts	0x00FA, r1
     fc4:	9f 5f       	subi	r25, 0xFF	; 255
 *		* aantal bytes
 * * gebruik IDE: 0 ( CAN standard rev 2.0 A (identifiers length = 11 bits) )
 */
void canInitMob(void){
	int i;
	for(i = 0; i < 15; i++) {
     fc6:	9f 30       	cpi	r25, 0x0F	; 15
     fc8:	11 f7       	brne	.-60     	; 0xf8e <canInitMob+0x2>
		CANCDMOB = (1 << CONMOB1) | (1 << IDE);
		else
		CANCDMOB = 0; //(1 << IDE);*/
	}
	
}
     fca:	08 95       	ret

00000fcc <canInitSendOne>:
	}*/
}


void canInitSendOne(uint16_t can_id, char mob, char length) {
	CANPAGE = mob;			//MOb11 select
     fcc:	60 93 ed 00 	sts	0x00ED, r22
	CANSTMOB = 0x00;		//clear flag
     fd0:	10 92 ee 00 	sts	0x00EE, r1
	CANIDT4 = 0x00;			//RTRTAG = 0 "Data Frame"
     fd4:	10 92 f0 00 	sts	0x00F0, r1
	CANIDT3 = 0x00;
     fd8:	10 92 f1 00 	sts	0x00F1, r1
	CANIDT2 = (uint8_t)(can_id << 5);			// set ID Tag
     fdc:	28 2f       	mov	r18, r24
     fde:	22 95       	swap	r18
     fe0:	22 0f       	add	r18, r18
     fe2:	20 7e       	andi	r18, 0xE0	; 224
     fe4:	20 93 f2 00 	sts	0x00F2, r18
	CANIDT1 = (uint8_t)(can_id >> 3);
     fe8:	23 e0       	ldi	r18, 0x03	; 3
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	2a 95       	dec	r18
     ff0:	e1 f7       	brne	.-8      	; 0xfea <canInitSendOne+0x1e>
     ff2:	80 93 f3 00 	sts	0x00F3, r24
	CANIDM1 = 0x00;			// no mask
     ff6:	10 92 f7 00 	sts	0x00F7, r1
	CANIDM2 = 0x00;
     ffa:	10 92 f6 00 	sts	0x00F6, r1
	CANIDM3 = 0x00;
     ffe:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM4 = 0x00;
    1002:	10 92 f4 00 	sts	0x00F4, r1
	CANCDMOB = 0x40 | (length & 0x0F); // enable transmission + set length of message
    1006:	4f 70       	andi	r20, 0x0F	; 15
    1008:	40 64       	ori	r20, 0x40	; 64
    100a:	40 93 ef 00 	sts	0x00EF, r20

}
    100e:	08 95       	ret

00001010 <canInitSend>:
	char mob;
	#if defined(WHEEL)
		//wheelSpeed	ID: 1 length: 1
		can_id = 0x00000001;       // message ID = 1
		mob = 0xA0;
		canInitSendOne(can_id, mob, 1);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	60 ea       	ldi	r22, 0xA0	; 160
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	0e 94 e6 07 	call	0xfcc	; 0xfcc <canInitSendOne>
		
		break;
		default:
		break;
	}*/
}
    101c:	08 95       	ret

0000101e <canInitRecieve>:
			break;
		default:
			break;
	
	}*/
}
    101e:	08 95       	ret

00001020 <canSend>:
 *	* send interrupt enablen
 *	* CANIDT1, CANIDT2, CANIDT3, and CANIDT4
 *		* IDT: wordt automatisch ingevuld
 */
void canSend(char id, uint16_t value){
	switch(id){
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	81 f0       	breq	.+32     	; 0x1044 <canSend+0x24>
    1024:	84 30       	cpi	r24, 0x04	; 4
    1026:	28 f4       	brcc	.+10     	; 0x1032 <canSend+0x12>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	41 f0       	breq	.+16     	; 0x103c <canSend+0x1c>
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	b9 f4       	brne	.+46     	; 0x105e <canSend+0x3e>
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <canSend+0x20>
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	69 f0       	breq	.+26     	; 0x1050 <canSend+0x30>
    1036:	85 30       	cpi	r24, 0x05	; 5
    1038:	91 f4       	brne	.+36     	; 0x105e <canSend+0x3e>
    103a:	0c c0       	rjmp	.+24     	; 0x1054 <canSend+0x34>
		case 1:
			CANPAGE = 0xA0;						//MOb10 select
    103c:	80 ea       	ldi	r24, 0xA0	; 160
    103e:	0b c0       	rjmp	.+22     	; 0x1056 <canSend+0x36>
			CANMSG = (uint16_t)(value);			//data i want to send
			break;
		case 2:
			CANPAGE = 0xB0;						//MOb10 select
    1040:	80 eb       	ldi	r24, 0xB0	; 176
    1042:	09 c0       	rjmp	.+18     	; 0x1056 <canSend+0x36>
			CANMSG = (uint16_t)(value);			//data i want to send
			break;
		case 3:
			CANPAGE = 0xC0;						//MOb10 select
    1044:	80 ec       	ldi	r24, 0xC0	; 192
    1046:	80 93 ed 00 	sts	0x00ED, r24
			CANMSG = (uint16_t)(value >> 8);	//data i want to send
    104a:	70 93 fa 00 	sts	0x00FA, r23
    104e:	05 c0       	rjmp	.+10     	; 0x105a <canSend+0x3a>
			CANMSG = (uint16_t)(value);
			break;
		case 4:
			CANPAGE = 0xD0;						//MOb10 select
    1050:	80 ed       	ldi	r24, 0xD0	; 208
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <canSend+0x36>
			CANMSG = (uint16_t)(value);			//data i want to send
			break;
		case 5:
			CANPAGE = 0xE0;						//MOb10 select
    1054:	80 ee       	ldi	r24, 0xE0	; 224
    1056:	80 93 ed 00 	sts	0x00ED, r24
			CANMSG = (uint16_t)(value);			//data i want to send
    105a:	60 93 fa 00 	sts	0x00FA, r22
			break;
	}
	CANCDMOB |= (1 << CONMOB0);	
    105e:	80 91 ef 00 	lds	r24, 0x00EF
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	80 93 ef 00 	sts	0x00EF, r24
}
    1068:	08 95       	ret

0000106a <canStop>:
 * * pas wanneer er niet verstuurd/ontvangen wordt
 * * CANCDMOB
 *		* CONMOB[1:0] => 00 disable, 01 enable Tx, 10 enable Rx
 */
void canStop(void){
	while(CANGIT & (1 << CANIT)){}
    106a:	80 91 da 00 	lds	r24, 0x00DA
    106e:	87 fd       	sbrc	r24, 7
    1070:	fc cf       	rjmp	.-8      	; 0x106a <canStop>
		CANGIE = ~(~CANGIE | (1 << ENIT)| (1 << ENRX) | (1 << ENTX)); // all interrupts disabled
    1072:	80 91 db 00 	lds	r24, 0x00DB
    1076:	8f 74       	andi	r24, 0x4F	; 79
    1078:	80 93 db 00 	sts	0x00DB, r24
		CANGCON = ~(~CANGCON | (1 << ENASTB)); // disable CAN controller*/
    107c:	80 91 d8 00 	lds	r24, 0x00D8
    1080:	8d 7f       	andi	r24, 0xFD	; 253
    1082:	80 93 d8 00 	sts	0x00D8, r24
}
    1086:	08 95       	ret

00001088 <canStart>:
/*!
 * \brief can opstarten
 * interrupts en controller enablen.
 */
void canStart(void){
	CANGIE = CANGIE | (1 << ENIT)| (1 << ENRX) | (1 << ENTX); // all interrupts enabled
    1088:	eb ed       	ldi	r30, 0xDB	; 219
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 6b       	ori	r24, 0xB0	; 176
    1090:	80 83       	st	Z, r24
	// activate CAN controller
	CANGCON |= (1 << ENASTB);
    1092:	e8 ed       	ldi	r30, 0xD8	; 216
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	82 60       	ori	r24, 0x02	; 2
    109a:	80 83       	st	Z, r24
}
    109c:	08 95       	ret

0000109e <__vector_18>:


ISR(CANIT_vect) {
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	0b b6       	in	r0, 0x3b	; 59
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	1f 93       	push	r17
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
	CANGIT = ~(~CANGIT | (1 << CANIT));
    10c6:	80 91 da 00 	lds	r24, 0x00DA
    10ca:	8f 77       	andi	r24, 0x7F	; 127
    10cc:	80 93 da 00 	sts	0x00DA, r24
	unsigned char temp;
	temp = CANPAGE;
    10d0:	10 91 ed 00 	lds	r17, 0x00ED
	CANPAGE = CANHPMOB;
    10d4:	80 91 ec 00 	lds	r24, 0x00EC
    10d8:	80 93 ed 00 	sts	0x00ED, r24
	
	char data1, data2 = 0x00; 

	if (CANSTMOB & (1 << RXOK))
    10dc:	80 91 ee 00 	lds	r24, 0x00EE
    10e0:	85 ff       	sbrs	r24, 5
    10e2:	47 c0       	rjmp	.+142    	; 0x1172 <__stack+0x73>
	{
		//printf("voor de switch: %d \n", CANPAGE >> 4);
		switch(CANPAGE >> 4) {
    10e4:	80 91 ed 00 	lds	r24, 0x00ED
    10e8:	82 95       	swap	r24
    10ea:	8f 70       	andi	r24, 0x0F	; 15
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	d1 f0       	breq	.+52     	; 0x1124 <__stack+0x25>
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	28 f4       	brcc	.+10     	; 0x10fe <__vector_18+0x60>
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	41 f0       	breq	.+16     	; 0x1108 <__stack+0x9>
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	a9 f5       	brne	.+106    	; 0x1166 <__stack+0x67>
    10fc:	0c c0       	rjmp	.+24     	; 0x1116 <__stack+0x17>
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	21 f1       	breq	.+72     	; 0x114a <__stack+0x4b>
    1102:	85 30       	cpi	r24, 0x05	; 5
    1104:	81 f5       	brne	.+96     	; 0x1166 <__stack+0x67>
    1106:	28 c0       	rjmp	.+80     	; 0x1158 <__stack+0x59>
			case 1:
				data1 = CANMSG;
    1108:	80 91 fa 00 	lds	r24, 0x00FA
				functionCANSpeed(data1);
    110c:	e0 91 97 03 	lds	r30, 0x0397
    1110:	f0 91 98 03 	lds	r31, 0x0398
    1114:	27 c0       	rjmp	.+78     	; 0x1164 <__stack+0x65>
				break;
			case 2:
				data1 = CANMSG;
    1116:	80 91 fa 00 	lds	r24, 0x00FA
				functionCANButton(data1);
    111a:	e0 91 9b 03 	lds	r30, 0x039B
    111e:	f0 91 9c 03 	lds	r31, 0x039C
    1122:	20 c0       	rjmp	.+64     	; 0x1164 <__stack+0x65>
				break;
			case 3:
				data1 = CANMSG;
    1124:	30 91 fa 00 	lds	r19, 0x00FA
				CANPAGE |= 1 << INDX0;
    1128:	80 91 ed 00 	lds	r24, 0x00ED
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	80 93 ed 00 	sts	0x00ED, r24
				data2 = CANMSG;
    1132:	20 91 fa 00 	lds	r18, 0x00FA
				uint16_t data = (uint16_t)(data1 << 8) + (uint16_t)(data2);
				functionCANForce(data);
    1136:	93 2f       	mov	r25, r19
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	e0 91 9d 03 	lds	r30, 0x039D
    113e:	f0 91 9e 03 	lds	r31, 0x039E
    1142:	82 0f       	add	r24, r18
    1144:	91 1d       	adc	r25, r1
    1146:	09 95       	icall
    1148:	0e c0       	rjmp	.+28     	; 0x1166 <__stack+0x67>
				break;
			case 4:
				data1 = CANMSG;
    114a:	80 91 fa 00 	lds	r24, 0x00FA
				functionCANSetSpeed(data1);
    114e:	e0 91 9f 03 	lds	r30, 0x039F
    1152:	f0 91 a0 03 	lds	r31, 0x03A0
    1156:	06 c0       	rjmp	.+12     	; 0x1164 <__stack+0x65>
				break;
			case 5:
				data1 = CANMSG;
    1158:	80 91 fa 00 	lds	r24, 0x00FA
				functionCANCCOn(data1);
    115c:	e0 91 95 03 	lds	r30, 0x0395
    1160:	f0 91 96 03 	lds	r31, 0x0396
    1164:	09 95       	icall
				break;
		}
		
		CANCDMOB |= 1 << CONMOB1;
    1166:	80 91 ef 00 	lds	r24, 0x00EF
    116a:	80 68       	ori	r24, 0x80	; 128
    116c:	80 93 ef 00 	sts	0x00EF, r24
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <__stack+0x77>
	}
	else if (CANSTMOB & (1 << TXOK))
    1172:	80 91 ee 00 	lds	r24, 0x00EE
	}
	else
	{
		
	}	
	CANSTMOB = 0x00; // clear MOb1 RXOK Interrupt Flag
    1176:	10 92 ee 00 	sts	0x00EE, r1
	CANPAGE = temp;
    117a:	10 93 ed 00 	sts	0x00ED, r17
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	1f 91       	pop	r17
    1198:	0f 90       	pop	r0
    119a:	0b be       	out	0x3b, r0	; 59
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti

000011a6 <canInit>:
 *	* initialize function pointers
 *	* do software reset
 *	* enable interrupts
 *
 */
void canInit(void* FunctionCANSpeed, void* FunctionCANButton, void* FunctionCANForce, void* FunctionCANSetSpeed, void* FunctionCANCCOn){
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	7c 01       	movw	r14, r24
    11bc:	6b 01       	movw	r12, r22
    11be:	5a 01       	movw	r10, r20
    11c0:	49 01       	movw	r8, r18
		stdout = &mystdout;
    11c2:	80 ea       	ldi	r24, 0xA0	; 160
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	90 93 10 0f 	sts	0x0F10, r25
    11ca:	80 93 0f 0f 	sts	0x0F0F, r24
		init_USART0();
    11ce:	0e 94 28 09 	call	0x1250	; 0x1250 <init_USART0>
		printf("START MAIN \r");
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <canInit+0x2e>
    11d4:	89 e7       	ldi	r24, 0x79	; 121
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	ed b7       	in	r30, 0x3d	; 61
    11da:	fe b7       	in	r31, 0x3e	; 62
    11dc:	92 83       	std	Z+2, r25	; 0x02
    11de:	81 83       	std	Z+1, r24	; 0x01
    11e0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <printf>
		
	functionCANSpeed = FunctionCANSpeed;
    11e4:	f0 92 98 03 	sts	0x0398, r15
    11e8:	e0 92 97 03 	sts	0x0397, r14
	functionCANButton = FunctionCANButton;
    11ec:	d0 92 9c 03 	sts	0x039C, r13
    11f0:	c0 92 9b 03 	sts	0x039B, r12
	functionCANForce = FunctionCANForce;
    11f4:	b0 92 9e 03 	sts	0x039E, r11
    11f8:	a0 92 9d 03 	sts	0x039D, r10
	functionCANSetSpeed = FunctionCANSetSpeed;
    11fc:	90 92 a0 03 	sts	0x03A0, r9
    1200:	80 92 9f 03 	sts	0x039F, r8
	functionCANCCOn = FunctionCANCCOn;
    1204:	10 93 96 03 	sts	0x0396, r17
    1208:	00 93 95 03 	sts	0x0395, r16
		
	
	CANGCON |= (1 << SWRES); //swres software reset
    120c:	e8 ed       	ldi	r30, 0xD8	; 216
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	81 60       	ori	r24, 0x01	; 1
    1214:	80 83       	st	Z, r24
	
	//enable interrupt for all mobs
	CANIE1 = 0x7F;
    1216:	8f e7       	ldi	r24, 0x7F	; 127
    1218:	80 93 df 00 	sts	0x00DF, r24
	CANIE2 = 0xFF;
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	80 93 de 00 	sts	0x00DE, r24
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
}
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	bf 90       	pop	r11
    1234:	af 90       	pop	r10
    1236:	9f 90       	pop	r9
    1238:	8f 90       	pop	r8
    123a:	08 95       	ret

0000123c <ledsInit>:
	@return void
*/
void ledsInit(void)
{
	// All output
	DDRA =  0b11111111;
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	81 b9       	out	0x01, r24	; 1
	
}
    1240:	08 95       	ret

00001242 <ledsSet>:
    @param bitmask char -> absolute value.
	@return void
*/
void ledsSet(char bitmask)
{
	PORTA = bitmask;
    1242:	82 b9       	out	0x02, r24	; 2
    1244:	08 95       	ret

00001246 <pwmInit>:
	
	//OCR0A = 0x70;
   //
   
   //COM0A --> SET OC0A for comparing, WGM -> fast PWM, CS -> ci/O = prescaler/256
	TCCR0A |= (1 << FOC0A) | (1<<COM0A1) | (1 <<COM0A0)| (1<<WGM00)| (1<<WGM01) | (1 << CS02);
    1246:	84 b5       	in	r24, 0x24	; 36
    1248:	8c 6f       	ori	r24, 0xFC	; 252
    124a:	84 bd       	out	0x24, r24	; 36

	//external output for the OCR0A -> PWM
	DDRB  |= (1 << DDB7);
    124c:	27 9a       	sbi	0x04, 7	; 4
}
    124e:	08 95       	ret

00001250 <init_USART0>:


void init_USART0() {
		/* initialize USART0 */
	UBRR0H = 0;
    1250:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51; //baudrate 9600 for 8 Mhz
    1254:	83 e3       	ldi	r24, 0x33	; 51
    1256:	80 93 c4 00 	sts	0x00C4, r24
	UCSR1C = (0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | (3<<UCSZ0); //1 stop bits, no parity, 8 data bits
    125a:	86 e0       	ldi	r24, 0x06	; 6
    125c:	80 93 ca 00 	sts	0x00CA, r24
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); //Rx & Tx enabled
    1260:	88 e1       	ldi	r24, 0x18	; 24
    1262:	80 93 c1 00 	sts	0x00C1, r24
	#ifdef UART_DEBUG
	USART0_Transmit_String("\n\rUSART0 initialized...\n\r");
	#endif
}
    1266:	08 95       	ret

00001268 <uart_putchar>:
	USART1_Transmit_String("\n\rUSART1 initialized...\n\r");
	#endif
}

int uart_putchar(char c, FILE *stream)
{
    1268:	1f 93       	push	r17
    126a:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
    126c:	8a 30       	cpi	r24, 0x0A	; 10
    126e:	19 f4       	brne	.+6      	; 0x1276 <uart_putchar+0xe>
    1270:	8d e0       	ldi	r24, 0x0D	; 13
    1272:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>

    loop_until_bit_is_set(UCSR0A, UDRE0);
    1276:	80 91 c0 00 	lds	r24, 0x00C0
    127a:	85 ff       	sbrs	r24, 5
    127c:	fc cf       	rjmp	.-8      	; 0x1276 <uart_putchar+0xe>
    UDR0 = c;
    127e:	10 93 c6 00 	sts	0x00C6, r17

    return 0;
}
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	1f 91       	pop	r17
    1288:	08 95       	ret

0000128a <__vector_8>:
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

#include <avr/interrupt.h>
ISR (INT7_vect)
{
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	0b b6       	in	r0, 0x3b	; 59
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
  tpl_central_interrupt_handler(boutonISR7_id);
    12b0:	89 e0       	ldi	r24, 0x09	; 9
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <tpl_central_interrupt_handler>
}
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0b be       	out	0x3b, r0	; 59
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_7>:
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

#include <avr/interrupt.h>
ISR (INT6_vect)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	0b b6       	in	r0, 0x3b	; 59
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
  tpl_central_interrupt_handler(boutonISR6_id);
    1304:	88 e0       	ldi	r24, 0x08	; 8
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 52 01 	call	0x2a4	; 0x2a4 <tpl_central_interrupt_handler>
}
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	bf 91       	pop	r27
    1312:	af 91       	pop	r26
    1314:	9f 91       	pop	r25
    1316:	8f 91       	pop	r24
    1318:	7f 91       	pop	r23
    131a:	6f 91       	pop	r22
    131c:	5f 91       	pop	r21
    131e:	4f 91       	pop	r20
    1320:	3f 91       	pop	r19
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0b be       	out	0x3b, r0	; 59
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	0f 90       	pop	r0
    132e:	1f 90       	pop	r1
    1330:	18 95       	reti

00001332 <__vector_6>:
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

#include <avr/interrupt.h>
ISR (INT5_vect)
{
    1332:	1f 92       	push	r1
    1334:	0f 92       	push	r0
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	0f 92       	push	r0
    133a:	0b b6       	in	r0, 0x3b	; 59
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
  tpl_central_interrupt_handler(boutonISR5_id);
    1358:	87 e0       	ldi	r24, 0x07	; 7
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <tpl_central_interrupt_handler>
}
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0b be       	out	0x3b, r0	; 59
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_5>:
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

#include <avr/interrupt.h>
ISR (INT4_vect)
{
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	0b b6       	in	r0, 0x3b	; 59
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
  tpl_central_interrupt_handler(boutonISR4_id);
    13ac:	86 e0       	ldi	r24, 0x06	; 6
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <tpl_central_interrupt_handler>
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0b be       	out	0x3b, r0	; 59
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <__vector_2>:
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

#include <avr/interrupt.h>
ISR (INT1_vect)
{
    13da:	1f 92       	push	r1
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	0b b6       	in	r0, 0x3b	; 59
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
  tpl_central_interrupt_handler(boutonISR1_id);
    1400:	85 e0       	ldi	r24, 0x05	; 5
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 52 01 	call	0x2a4	; 0x2a4 <tpl_central_interrupt_handler>
}
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0b be       	out	0x3b, r0	; 59
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	0f 90       	pop	r0
    142a:	1f 90       	pop	r1
    142c:	18 95       	reti

0000142e <__vector_25>:
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

#include <avr/interrupt.h>
ISR (ADC_vect)
{
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	0b b6       	in	r0, 0x3b	; 59
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	2f 93       	push	r18
    143e:	3f 93       	push	r19
    1440:	4f 93       	push	r20
    1442:	5f 93       	push	r21
    1444:	6f 93       	push	r22
    1446:	7f 93       	push	r23
    1448:	8f 93       	push	r24
    144a:	9f 93       	push	r25
    144c:	af 93       	push	r26
    144e:	bf 93       	push	r27
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
  tpl_central_interrupt_handler(adcISR1_id);
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 52 01 	call	0x2a4	; 0x2a4 <tpl_central_interrupt_handler>
}
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0b be       	out	0x3b, r0	; 59
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	0f 90       	pop	r0
    147e:	1f 90       	pop	r1
    1480:	18 95       	reti

00001482 <__vector_10>:
#endif
#include <avr/interrupt.h>


ISR(TIMER2_OVF_vect)
{
    1482:	1f 92       	push	r1
    1484:	0f 92       	push	r0
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	0f 92       	push	r0
    148a:	0b b6       	in	r0, 0x3b	; 59
    148c:	0f 92       	push	r0
    148e:	11 24       	eor	r1, r1
    1490:	2f 93       	push	r18
    1492:	3f 93       	push	r19
    1494:	4f 93       	push	r20
    1496:	5f 93       	push	r21
    1498:	6f 93       	push	r22
    149a:	7f 93       	push	r23
    149c:	8f 93       	push	r24
    149e:	9f 93       	push	r25
    14a0:	af 93       	push	r26
    14a2:	bf 93       	push	r27
    14a4:	ef 93       	push	r30
    14a6:	ff 93       	push	r31
  tpl_status  need_rescheduling = NO_SPECIAL_CODE;


  need_rescheduling |= tpl_counter_tick(&SystemCounter_counter_desc);
    14a8:	8e ea       	ldi	r24, 0xAE	; 174
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <tpl_counter_tick>

  if (need_rescheduling == NEED_RESCHEDULING)
    14b0:	80 32       	cpi	r24, 0x20	; 32
    14b2:	81 f4       	brne	.+32     	; 0x14d4 <__vector_10+0x52>
  {
    tpl_schedule_from_running();
    14b4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <tpl_schedule_from_running>
#if WITH_SYSTEM_CALL == NO
    if (tpl_kern.need_switch != NO_NEED_SWITCH) {
    14b8:	80 91 90 01 	lds	r24, 0x0190
    14bc:	88 23       	and	r24, r24
    14be:	51 f0       	breq	.+20     	; 0x14d4 <__vector_10+0x52>
      tpl_switch_context_from_it(
    14c0:	60 91 88 01 	lds	r22, 0x0188
    14c4:	70 91 89 01 	lds	r23, 0x0189
    14c8:	80 91 86 01 	lds	r24, 0x0186
    14cc:	90 91 87 01 	lds	r25, 0x0187
    14d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <tpl_switch_context>
        &(tpl_kern.s_running->context)
      );
    }
#endif
  }
}
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0b be       	out	0x3b, r0	; 59
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <printf>:
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	fe 01       	movw	r30, r28
    1504:	35 96       	adiw	r30, 0x05	; 5
    1506:	61 91       	ld	r22, Z+
    1508:	71 91       	ld	r23, Z+
    150a:	80 91 0f 0f 	lds	r24, 0x0F0F
    150e:	90 91 10 0f 	lds	r25, 0x0F10
    1512:	af 01       	movw	r20, r30
    1514:	0e 94 c4 0a 	call	0x1588	; 0x1588 <vfprintf>
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <puts>:
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	8c 01       	movw	r16, r24
    1528:	e0 91 0f 0f 	lds	r30, 0x0F0F
    152c:	f0 91 10 0f 	lds	r31, 0x0F10
    1530:	83 81       	ldd	r24, Z+3	; 0x03
    1532:	81 ff       	sbrs	r24, 1
    1534:	21 c0       	rjmp	.+66     	; 0x1578 <puts+0x5a>
    1536:	c0 e0       	ldi	r28, 0x00	; 0
    1538:	d0 e0       	ldi	r29, 0x00	; 0
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <puts+0x38>
    153c:	e0 91 0f 0f 	lds	r30, 0x0F0F
    1540:	f0 91 10 0f 	lds	r31, 0x0F10
    1544:	20 85       	ldd	r18, Z+8	; 0x08
    1546:	31 85       	ldd	r19, Z+9	; 0x09
    1548:	bf 01       	movw	r22, r30
    154a:	f9 01       	movw	r30, r18
    154c:	09 95       	icall
    154e:	89 2b       	or	r24, r25
    1550:	11 f0       	breq	.+4      	; 0x1556 <puts+0x38>
    1552:	cf ef       	ldi	r28, 0xFF	; 255
    1554:	df ef       	ldi	r29, 0xFF	; 255
    1556:	f8 01       	movw	r30, r16
    1558:	81 91       	ld	r24, Z+
    155a:	8f 01       	movw	r16, r30
    155c:	88 23       	and	r24, r24
    155e:	71 f7       	brne	.-36     	; 0x153c <puts+0x1e>
    1560:	e0 91 0f 0f 	lds	r30, 0x0F0F
    1564:	f0 91 10 0f 	lds	r31, 0x0F10
    1568:	20 85       	ldd	r18, Z+8	; 0x08
    156a:	31 85       	ldd	r19, Z+9	; 0x09
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	bf 01       	movw	r22, r30
    1570:	f9 01       	movw	r30, r18
    1572:	09 95       	icall
    1574:	89 2b       	or	r24, r25
    1576:	11 f0       	breq	.+4      	; 0x157c <puts+0x5e>
    1578:	cf ef       	ldi	r28, 0xFF	; 255
    157a:	df ef       	ldi	r29, 0xFF	; 255
    157c:	ce 01       	movw	r24, r28
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <vfprintf>:
    1588:	2f 92       	push	r2
    158a:	3f 92       	push	r3
    158c:	4f 92       	push	r4
    158e:	5f 92       	push	r5
    1590:	6f 92       	push	r6
    1592:	7f 92       	push	r7
    1594:	8f 92       	push	r8
    1596:	9f 92       	push	r9
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	cf 92       	push	r12
    159e:	df 92       	push	r13
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	2b 97       	sbiw	r28, 0x0b	; 11
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	3c 01       	movw	r6, r24
    15be:	2b 01       	movw	r4, r22
    15c0:	5a 01       	movw	r10, r20
    15c2:	fc 01       	movw	r30, r24
    15c4:	17 82       	std	Z+7, r1	; 0x07
    15c6:	16 82       	std	Z+6, r1	; 0x06
    15c8:	83 81       	ldd	r24, Z+3	; 0x03
    15ca:	81 fd       	sbrc	r24, 1
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <vfprintf+0x4c>
    15ce:	6f ef       	ldi	r22, 0xFF	; 255
    15d0:	7f ef       	ldi	r23, 0xFF	; 255
    15d2:	c6 c1       	rjmp	.+908    	; 0x1960 <vfprintf+0x3d8>
    15d4:	9a e0       	ldi	r25, 0x0A	; 10
    15d6:	89 2e       	mov	r8, r25
    15d8:	1e 01       	movw	r2, r28
    15da:	08 94       	sec
    15dc:	21 1c       	adc	r2, r1
    15de:	31 1c       	adc	r3, r1
    15e0:	f3 01       	movw	r30, r6
    15e2:	23 81       	ldd	r18, Z+3	; 0x03
    15e4:	f2 01       	movw	r30, r4
    15e6:	23 fd       	sbrc	r18, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	23 ff       	sbrs	r18, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	2f 01       	movw	r4, r30
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <vfprintf+0x6e>
    15f4:	b2 c1       	rjmp	.+868    	; 0x195a <vfprintf+0x3d2>
    15f6:	85 32       	cpi	r24, 0x25	; 37
    15f8:	39 f4       	brne	.+14     	; 0x1608 <vfprintf+0x80>
    15fa:	23 fd       	sbrc	r18, 3
    15fc:	85 91       	lpm	r24, Z+
    15fe:	23 ff       	sbrs	r18, 3
    1600:	81 91       	ld	r24, Z+
    1602:	2f 01       	movw	r4, r30
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	29 f4       	brne	.+10     	; 0x1612 <vfprintf+0x8a>
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b3 01       	movw	r22, r6
    160c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1610:	e7 cf       	rjmp	.-50     	; 0x15e0 <vfprintf+0x58>
    1612:	98 2f       	mov	r25, r24
    1614:	ff 24       	eor	r15, r15
    1616:	ee 24       	eor	r14, r14
    1618:	99 24       	eor	r9, r9
    161a:	ff e1       	ldi	r31, 0x1F	; 31
    161c:	ff 15       	cp	r31, r15
    161e:	d0 f0       	brcs	.+52     	; 0x1654 <vfprintf+0xcc>
    1620:	9b 32       	cpi	r25, 0x2B	; 43
    1622:	69 f0       	breq	.+26     	; 0x163e <vfprintf+0xb6>
    1624:	9c 32       	cpi	r25, 0x2C	; 44
    1626:	28 f4       	brcc	.+10     	; 0x1632 <vfprintf+0xaa>
    1628:	90 32       	cpi	r25, 0x20	; 32
    162a:	59 f0       	breq	.+22     	; 0x1642 <vfprintf+0xba>
    162c:	93 32       	cpi	r25, 0x23	; 35
    162e:	91 f4       	brne	.+36     	; 0x1654 <vfprintf+0xcc>
    1630:	0e c0       	rjmp	.+28     	; 0x164e <vfprintf+0xc6>
    1632:	9d 32       	cpi	r25, 0x2D	; 45
    1634:	49 f0       	breq	.+18     	; 0x1648 <vfprintf+0xc0>
    1636:	90 33       	cpi	r25, 0x30	; 48
    1638:	69 f4       	brne	.+26     	; 0x1654 <vfprintf+0xcc>
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	24 c0       	rjmp	.+72     	; 0x1686 <vfprintf+0xfe>
    163e:	52 e0       	ldi	r21, 0x02	; 2
    1640:	f5 2a       	or	r15, r21
    1642:	84 e0       	ldi	r24, 0x04	; 4
    1644:	f8 2a       	or	r15, r24
    1646:	28 c0       	rjmp	.+80     	; 0x1698 <vfprintf+0x110>
    1648:	98 e0       	ldi	r25, 0x08	; 8
    164a:	f9 2a       	or	r15, r25
    164c:	25 c0       	rjmp	.+74     	; 0x1698 <vfprintf+0x110>
    164e:	e0 e1       	ldi	r30, 0x10	; 16
    1650:	fe 2a       	or	r15, r30
    1652:	22 c0       	rjmp	.+68     	; 0x1698 <vfprintf+0x110>
    1654:	f7 fc       	sbrc	r15, 7
    1656:	29 c0       	rjmp	.+82     	; 0x16aa <vfprintf+0x122>
    1658:	89 2f       	mov	r24, r25
    165a:	80 53       	subi	r24, 0x30	; 48
    165c:	8a 30       	cpi	r24, 0x0A	; 10
    165e:	70 f4       	brcc	.+28     	; 0x167c <vfprintf+0xf4>
    1660:	f6 fe       	sbrs	r15, 6
    1662:	05 c0       	rjmp	.+10     	; 0x166e <vfprintf+0xe6>
    1664:	98 9c       	mul	r9, r8
    1666:	90 2c       	mov	r9, r0
    1668:	11 24       	eor	r1, r1
    166a:	98 0e       	add	r9, r24
    166c:	15 c0       	rjmp	.+42     	; 0x1698 <vfprintf+0x110>
    166e:	e8 9c       	mul	r14, r8
    1670:	e0 2c       	mov	r14, r0
    1672:	11 24       	eor	r1, r1
    1674:	e8 0e       	add	r14, r24
    1676:	f0 e2       	ldi	r31, 0x20	; 32
    1678:	ff 2a       	or	r15, r31
    167a:	0e c0       	rjmp	.+28     	; 0x1698 <vfprintf+0x110>
    167c:	9e 32       	cpi	r25, 0x2E	; 46
    167e:	29 f4       	brne	.+10     	; 0x168a <vfprintf+0x102>
    1680:	f6 fc       	sbrc	r15, 6
    1682:	6b c1       	rjmp	.+726    	; 0x195a <vfprintf+0x3d2>
    1684:	40 e4       	ldi	r20, 0x40	; 64
    1686:	f4 2a       	or	r15, r20
    1688:	07 c0       	rjmp	.+14     	; 0x1698 <vfprintf+0x110>
    168a:	9c 36       	cpi	r25, 0x6C	; 108
    168c:	19 f4       	brne	.+6      	; 0x1694 <vfprintf+0x10c>
    168e:	50 e8       	ldi	r21, 0x80	; 128
    1690:	f5 2a       	or	r15, r21
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <vfprintf+0x110>
    1694:	98 36       	cpi	r25, 0x68	; 104
    1696:	49 f4       	brne	.+18     	; 0x16aa <vfprintf+0x122>
    1698:	f2 01       	movw	r30, r4
    169a:	23 fd       	sbrc	r18, 3
    169c:	95 91       	lpm	r25, Z+
    169e:	23 ff       	sbrs	r18, 3
    16a0:	91 91       	ld	r25, Z+
    16a2:	2f 01       	movw	r4, r30
    16a4:	99 23       	and	r25, r25
    16a6:	09 f0       	breq	.+2      	; 0x16aa <vfprintf+0x122>
    16a8:	b8 cf       	rjmp	.-144    	; 0x161a <vfprintf+0x92>
    16aa:	89 2f       	mov	r24, r25
    16ac:	85 54       	subi	r24, 0x45	; 69
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	18 f0       	brcs	.+6      	; 0x16b8 <vfprintf+0x130>
    16b2:	80 52       	subi	r24, 0x20	; 32
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	38 f4       	brcc	.+14     	; 0x16c6 <vfprintf+0x13e>
    16b8:	44 e0       	ldi	r20, 0x04	; 4
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	a4 0e       	add	r10, r20
    16be:	b5 1e       	adc	r11, r21
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	59 83       	std	Y+1, r21	; 0x01
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <vfprintf+0x15c>
    16c6:	93 36       	cpi	r25, 0x63	; 99
    16c8:	31 f0       	breq	.+12     	; 0x16d6 <vfprintf+0x14e>
    16ca:	93 37       	cpi	r25, 0x73	; 115
    16cc:	79 f0       	breq	.+30     	; 0x16ec <vfprintf+0x164>
    16ce:	93 35       	cpi	r25, 0x53	; 83
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <vfprintf+0x14c>
    16d2:	56 c0       	rjmp	.+172    	; 0x1780 <vfprintf+0x1f8>
    16d4:	20 c0       	rjmp	.+64     	; 0x1716 <vfprintf+0x18e>
    16d6:	f5 01       	movw	r30, r10
    16d8:	80 81       	ld	r24, Z
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	42 e0       	ldi	r20, 0x02	; 2
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	a4 0e       	add	r10, r20
    16e2:	b5 1e       	adc	r11, r21
    16e4:	61 01       	movw	r12, r2
    16e6:	01 e0       	ldi	r16, 0x01	; 1
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	12 c0       	rjmp	.+36     	; 0x1710 <vfprintf+0x188>
    16ec:	f5 01       	movw	r30, r10
    16ee:	c0 80       	ld	r12, Z
    16f0:	d1 80       	ldd	r13, Z+1	; 0x01
    16f2:	f6 fc       	sbrc	r15, 6
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <vfprintf+0x174>
    16f6:	6f ef       	ldi	r22, 0xFF	; 255
    16f8:	7f ef       	ldi	r23, 0xFF	; 255
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0x178>
    16fc:	69 2d       	mov	r22, r9
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	42 e0       	ldi	r20, 0x02	; 2
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	a4 0e       	add	r10, r20
    1706:	b5 1e       	adc	r11, r21
    1708:	c6 01       	movw	r24, r12
    170a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <strnlen>
    170e:	8c 01       	movw	r16, r24
    1710:	5f e7       	ldi	r21, 0x7F	; 127
    1712:	f5 22       	and	r15, r21
    1714:	14 c0       	rjmp	.+40     	; 0x173e <vfprintf+0x1b6>
    1716:	f5 01       	movw	r30, r10
    1718:	c0 80       	ld	r12, Z
    171a:	d1 80       	ldd	r13, Z+1	; 0x01
    171c:	f6 fc       	sbrc	r15, 6
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x19e>
    1720:	6f ef       	ldi	r22, 0xFF	; 255
    1722:	7f ef       	ldi	r23, 0xFF	; 255
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x1a2>
    1726:	69 2d       	mov	r22, r9
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	42 e0       	ldi	r20, 0x02	; 2
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	a4 0e       	add	r10, r20
    1730:	b5 1e       	adc	r11, r21
    1732:	c6 01       	movw	r24, r12
    1734:	0e 94 ca 0c 	call	0x1994	; 0x1994 <strnlen_P>
    1738:	8c 01       	movw	r16, r24
    173a:	50 e8       	ldi	r21, 0x80	; 128
    173c:	f5 2a       	or	r15, r21
    173e:	f3 fe       	sbrs	r15, 3
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <vfprintf+0x1c8>
    1742:	1a c0       	rjmp	.+52     	; 0x1778 <vfprintf+0x1f0>
    1744:	80 e2       	ldi	r24, 0x20	; 32
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	b3 01       	movw	r22, r6
    174a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    174e:	ea 94       	dec	r14
    1750:	8e 2d       	mov	r24, r14
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	08 17       	cp	r16, r24
    1756:	19 07       	cpc	r17, r25
    1758:	a8 f3       	brcs	.-22     	; 0x1744 <vfprintf+0x1bc>
    175a:	0e c0       	rjmp	.+28     	; 0x1778 <vfprintf+0x1f0>
    175c:	f6 01       	movw	r30, r12
    175e:	f7 fc       	sbrc	r15, 7
    1760:	85 91       	lpm	r24, Z+
    1762:	f7 fe       	sbrs	r15, 7
    1764:	81 91       	ld	r24, Z+
    1766:	6f 01       	movw	r12, r30
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	b3 01       	movw	r22, r6
    176c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1770:	e1 10       	cpse	r14, r1
    1772:	ea 94       	dec	r14
    1774:	01 50       	subi	r16, 0x01	; 1
    1776:	10 40       	sbci	r17, 0x00	; 0
    1778:	01 15       	cp	r16, r1
    177a:	11 05       	cpc	r17, r1
    177c:	79 f7       	brne	.-34     	; 0x175c <vfprintf+0x1d4>
    177e:	ea c0       	rjmp	.+468    	; 0x1954 <vfprintf+0x3cc>
    1780:	94 36       	cpi	r25, 0x64	; 100
    1782:	11 f0       	breq	.+4      	; 0x1788 <vfprintf+0x200>
    1784:	99 36       	cpi	r25, 0x69	; 105
    1786:	69 f5       	brne	.+90     	; 0x17e2 <vfprintf+0x25a>
    1788:	f7 fe       	sbrs	r15, 7
    178a:	08 c0       	rjmp	.+16     	; 0x179c <vfprintf+0x214>
    178c:	f5 01       	movw	r30, r10
    178e:	20 81       	ld	r18, Z
    1790:	31 81       	ldd	r19, Z+1	; 0x01
    1792:	42 81       	ldd	r20, Z+2	; 0x02
    1794:	53 81       	ldd	r21, Z+3	; 0x03
    1796:	84 e0       	ldi	r24, 0x04	; 4
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0a c0       	rjmp	.+20     	; 0x17b0 <vfprintf+0x228>
    179c:	f5 01       	movw	r30, r10
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	9c 01       	movw	r18, r24
    17a4:	44 27       	eor	r20, r20
    17a6:	37 fd       	sbrc	r19, 7
    17a8:	40 95       	com	r20
    17aa:	54 2f       	mov	r21, r20
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a8 0e       	add	r10, r24
    17b2:	b9 1e       	adc	r11, r25
    17b4:	9f e6       	ldi	r25, 0x6F	; 111
    17b6:	f9 22       	and	r15, r25
    17b8:	57 ff       	sbrs	r21, 7
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <vfprintf+0x246>
    17bc:	50 95       	com	r21
    17be:	40 95       	com	r20
    17c0:	30 95       	com	r19
    17c2:	21 95       	neg	r18
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	4f 4f       	sbci	r20, 0xFF	; 255
    17c8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ca:	e0 e8       	ldi	r30, 0x80	; 128
    17cc:	fe 2a       	or	r15, r30
    17ce:	ca 01       	movw	r24, r20
    17d0:	b9 01       	movw	r22, r18
    17d2:	a1 01       	movw	r20, r2
    17d4:	2a e0       	ldi	r18, 0x0A	; 10
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__ultoa_invert>
    17dc:	d8 2e       	mov	r13, r24
    17de:	d2 18       	sub	r13, r2
    17e0:	40 c0       	rjmp	.+128    	; 0x1862 <vfprintf+0x2da>
    17e2:	95 37       	cpi	r25, 0x75	; 117
    17e4:	29 f4       	brne	.+10     	; 0x17f0 <vfprintf+0x268>
    17e6:	1f 2d       	mov	r17, r15
    17e8:	1f 7e       	andi	r17, 0xEF	; 239
    17ea:	2a e0       	ldi	r18, 0x0A	; 10
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	1d c0       	rjmp	.+58     	; 0x182a <vfprintf+0x2a2>
    17f0:	1f 2d       	mov	r17, r15
    17f2:	19 7f       	andi	r17, 0xF9	; 249
    17f4:	9f 36       	cpi	r25, 0x6F	; 111
    17f6:	61 f0       	breq	.+24     	; 0x1810 <vfprintf+0x288>
    17f8:	90 37       	cpi	r25, 0x70	; 112
    17fa:	20 f4       	brcc	.+8      	; 0x1804 <vfprintf+0x27c>
    17fc:	98 35       	cpi	r25, 0x58	; 88
    17fe:	09 f0       	breq	.+2      	; 0x1802 <vfprintf+0x27a>
    1800:	ac c0       	rjmp	.+344    	; 0x195a <vfprintf+0x3d2>
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <vfprintf+0x29a>
    1804:	90 37       	cpi	r25, 0x70	; 112
    1806:	39 f0       	breq	.+14     	; 0x1816 <vfprintf+0x28e>
    1808:	98 37       	cpi	r25, 0x78	; 120
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0x286>
    180c:	a6 c0       	rjmp	.+332    	; 0x195a <vfprintf+0x3d2>
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <vfprintf+0x290>
    1810:	28 e0       	ldi	r18, 0x08	; 8
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	0a c0       	rjmp	.+20     	; 0x182a <vfprintf+0x2a2>
    1816:	10 61       	ori	r17, 0x10	; 16
    1818:	14 fd       	sbrc	r17, 4
    181a:	14 60       	ori	r17, 0x04	; 4
    181c:	20 e1       	ldi	r18, 0x10	; 16
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	04 c0       	rjmp	.+8      	; 0x182a <vfprintf+0x2a2>
    1822:	14 fd       	sbrc	r17, 4
    1824:	16 60       	ori	r17, 0x06	; 6
    1826:	20 e1       	ldi	r18, 0x10	; 16
    1828:	32 e0       	ldi	r19, 0x02	; 2
    182a:	17 ff       	sbrs	r17, 7
    182c:	08 c0       	rjmp	.+16     	; 0x183e <vfprintf+0x2b6>
    182e:	f5 01       	movw	r30, r10
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	44 e0       	ldi	r20, 0x04	; 4
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	08 c0       	rjmp	.+16     	; 0x184e <vfprintf+0x2c6>
    183e:	f5 01       	movw	r30, r10
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	bc 01       	movw	r22, r24
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	42 e0       	ldi	r20, 0x02	; 2
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	a4 0e       	add	r10, r20
    1850:	b5 1e       	adc	r11, r21
    1852:	a1 01       	movw	r20, r2
    1854:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__ultoa_invert>
    1858:	d8 2e       	mov	r13, r24
    185a:	d2 18       	sub	r13, r2
    185c:	8f e7       	ldi	r24, 0x7F	; 127
    185e:	f8 2e       	mov	r15, r24
    1860:	f1 22       	and	r15, r17
    1862:	f6 fe       	sbrs	r15, 6
    1864:	0b c0       	rjmp	.+22     	; 0x187c <vfprintf+0x2f4>
    1866:	5e ef       	ldi	r21, 0xFE	; 254
    1868:	f5 22       	and	r15, r21
    186a:	d9 14       	cp	r13, r9
    186c:	38 f4       	brcc	.+14     	; 0x187c <vfprintf+0x2f4>
    186e:	f4 fe       	sbrs	r15, 4
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <vfprintf+0x2f8>
    1872:	f2 fc       	sbrc	r15, 2
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <vfprintf+0x2f8>
    1876:	8f ee       	ldi	r24, 0xEF	; 239
    1878:	f8 22       	and	r15, r24
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <vfprintf+0x2f8>
    187c:	1d 2d       	mov	r17, r13
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <vfprintf+0x2fa>
    1880:	19 2d       	mov	r17, r9
    1882:	f4 fe       	sbrs	r15, 4
    1884:	0d c0       	rjmp	.+26     	; 0x18a0 <vfprintf+0x318>
    1886:	fe 01       	movw	r30, r28
    1888:	ed 0d       	add	r30, r13
    188a:	f1 1d       	adc	r31, r1
    188c:	80 81       	ld	r24, Z
    188e:	80 33       	cpi	r24, 0x30	; 48
    1890:	19 f4       	brne	.+6      	; 0x1898 <vfprintf+0x310>
    1892:	99 ee       	ldi	r25, 0xE9	; 233
    1894:	f9 22       	and	r15, r25
    1896:	08 c0       	rjmp	.+16     	; 0x18a8 <vfprintf+0x320>
    1898:	1f 5f       	subi	r17, 0xFF	; 255
    189a:	f2 fe       	sbrs	r15, 2
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <vfprintf+0x320>
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <vfprintf+0x31e>
    18a0:	8f 2d       	mov	r24, r15
    18a2:	86 78       	andi	r24, 0x86	; 134
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <vfprintf+0x320>
    18a6:	1f 5f       	subi	r17, 0xFF	; 255
    18a8:	0f 2d       	mov	r16, r15
    18aa:	f3 fc       	sbrc	r15, 3
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <vfprintf+0x34e>
    18ae:	f0 fe       	sbrs	r15, 0
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <vfprintf+0x348>
    18b2:	1e 15       	cp	r17, r14
    18b4:	10 f0       	brcs	.+4      	; 0x18ba <vfprintf+0x332>
    18b6:	9d 2c       	mov	r9, r13
    18b8:	0b c0       	rjmp	.+22     	; 0x18d0 <vfprintf+0x348>
    18ba:	9d 2c       	mov	r9, r13
    18bc:	9e 0c       	add	r9, r14
    18be:	91 1a       	sub	r9, r17
    18c0:	1e 2d       	mov	r17, r14
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x348>
    18c4:	80 e2       	ldi	r24, 0x20	; 32
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	b3 01       	movw	r22, r6
    18ca:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    18ce:	1f 5f       	subi	r17, 0xFF	; 255
    18d0:	1e 15       	cp	r17, r14
    18d2:	c0 f3       	brcs	.-16     	; 0x18c4 <vfprintf+0x33c>
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <vfprintf+0x356>
    18d6:	1e 15       	cp	r17, r14
    18d8:	10 f4       	brcc	.+4      	; 0x18de <vfprintf+0x356>
    18da:	e1 1a       	sub	r14, r17
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <vfprintf+0x358>
    18de:	ee 24       	eor	r14, r14
    18e0:	04 ff       	sbrs	r16, 4
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <vfprintf+0x37a>
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	b3 01       	movw	r22, r6
    18ea:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    18ee:	02 ff       	sbrs	r16, 2
    18f0:	1d c0       	rjmp	.+58     	; 0x192c <vfprintf+0x3a4>
    18f2:	01 fd       	sbrc	r16, 1
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <vfprintf+0x374>
    18f6:	88 e7       	ldi	r24, 0x78	; 120
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e c0       	rjmp	.+28     	; 0x1918 <vfprintf+0x390>
    18fc:	88 e5       	ldi	r24, 0x58	; 88
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0b c0       	rjmp	.+22     	; 0x1918 <vfprintf+0x390>
    1902:	80 2f       	mov	r24, r16
    1904:	86 78       	andi	r24, 0x86	; 134
    1906:	91 f0       	breq	.+36     	; 0x192c <vfprintf+0x3a4>
    1908:	01 ff       	sbrs	r16, 1
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x388>
    190c:	8b e2       	ldi	r24, 0x2B	; 43
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <vfprintf+0x38a>
    1910:	80 e2       	ldi	r24, 0x20	; 32
    1912:	f7 fc       	sbrc	r15, 7
    1914:	8d e2       	ldi	r24, 0x2D	; 45
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	b3 01       	movw	r22, r6
    191a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    191e:	06 c0       	rjmp	.+12     	; 0x192c <vfprintf+0x3a4>
    1920:	80 e3       	ldi	r24, 0x30	; 48
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	b3 01       	movw	r22, r6
    1926:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    192a:	9a 94       	dec	r9
    192c:	d9 14       	cp	r13, r9
    192e:	c0 f3       	brcs	.-16     	; 0x1920 <vfprintf+0x398>
    1930:	da 94       	dec	r13
    1932:	f1 01       	movw	r30, r2
    1934:	ed 0d       	add	r30, r13
    1936:	f1 1d       	adc	r31, r1
    1938:	80 81       	ld	r24, Z
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b3 01       	movw	r22, r6
    193e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1942:	dd 20       	and	r13, r13
    1944:	a9 f7       	brne	.-22     	; 0x1930 <vfprintf+0x3a8>
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <vfprintf+0x3cc>
    1948:	80 e2       	ldi	r24, 0x20	; 32
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	b3 01       	movw	r22, r6
    194e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1952:	ea 94       	dec	r14
    1954:	ee 20       	and	r14, r14
    1956:	c1 f7       	brne	.-16     	; 0x1948 <vfprintf+0x3c0>
    1958:	43 ce       	rjmp	.-890    	; 0x15e0 <vfprintf+0x58>
    195a:	f3 01       	movw	r30, r6
    195c:	66 81       	ldd	r22, Z+6	; 0x06
    195e:	77 81       	ldd	r23, Z+7	; 0x07
    1960:	cb 01       	movw	r24, r22
    1962:	2b 96       	adiw	r28, 0x0b	; 11
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	bf 90       	pop	r11
    1980:	af 90       	pop	r10
    1982:	9f 90       	pop	r9
    1984:	8f 90       	pop	r8
    1986:	7f 90       	pop	r7
    1988:	6f 90       	pop	r6
    198a:	5f 90       	pop	r5
    198c:	4f 90       	pop	r4
    198e:	3f 90       	pop	r3
    1990:	2f 90       	pop	r2
    1992:	08 95       	ret

00001994 <strnlen_P>:
    1994:	fc 01       	movw	r30, r24
    1996:	05 90       	lpm	r0, Z+
    1998:	61 50       	subi	r22, 0x01	; 1
    199a:	70 40       	sbci	r23, 0x00	; 0
    199c:	01 10       	cpse	r0, r1
    199e:	d8 f7       	brcc	.-10     	; 0x1996 <strnlen_P+0x2>
    19a0:	80 95       	com	r24
    19a2:	90 95       	com	r25
    19a4:	8e 0f       	add	r24, r30
    19a6:	9f 1f       	adc	r25, r31
    19a8:	08 95       	ret

000019aa <strnlen>:
    19aa:	fc 01       	movw	r30, r24
    19ac:	61 50       	subi	r22, 0x01	; 1
    19ae:	70 40       	sbci	r23, 0x00	; 0
    19b0:	01 90       	ld	r0, Z+
    19b2:	01 10       	cpse	r0, r1
    19b4:	d8 f7       	brcc	.-10     	; 0x19ac <strnlen+0x2>
    19b6:	80 95       	com	r24
    19b8:	90 95       	com	r25
    19ba:	8e 0f       	add	r24, r30
    19bc:	9f 1f       	adc	r25, r31
    19be:	08 95       	ret

000019c0 <fputc>:
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	8c 01       	movw	r16, r24
    19ca:	eb 01       	movw	r28, r22
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	81 ff       	sbrs	r24, 1
    19d0:	1b c0       	rjmp	.+54     	; 0x1a08 <fputc+0x48>
    19d2:	82 ff       	sbrs	r24, 2
    19d4:	0d c0       	rjmp	.+26     	; 0x19f0 <fputc+0x30>
    19d6:	2e 81       	ldd	r18, Y+6	; 0x06
    19d8:	3f 81       	ldd	r19, Y+7	; 0x07
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	28 17       	cp	r18, r24
    19e0:	39 07       	cpc	r19, r25
    19e2:	64 f4       	brge	.+24     	; 0x19fc <fputc+0x3c>
    19e4:	e8 81       	ld	r30, Y
    19e6:	f9 81       	ldd	r31, Y+1	; 0x01
    19e8:	01 93       	st	Z+, r16
    19ea:	f9 83       	std	Y+1, r31	; 0x01
    19ec:	e8 83       	st	Y, r30
    19ee:	06 c0       	rjmp	.+12     	; 0x19fc <fputc+0x3c>
    19f0:	e8 85       	ldd	r30, Y+8	; 0x08
    19f2:	f9 85       	ldd	r31, Y+9	; 0x09
    19f4:	80 2f       	mov	r24, r16
    19f6:	09 95       	icall
    19f8:	89 2b       	or	r24, r25
    19fa:	31 f4       	brne	.+12     	; 0x1a08 <fputc+0x48>
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	9f 83       	std	Y+7, r25	; 0x07
    1a04:	8e 83       	std	Y+6, r24	; 0x06
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <fputc+0x4c>
    1a08:	0f ef       	ldi	r16, 0xFF	; 255
    1a0a:	1f ef       	ldi	r17, 0xFF	; 255
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <__ultoa_invert>:
    1a18:	fa 01       	movw	r30, r20
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	28 30       	cpi	r18, 0x08	; 8
    1a1e:	51 f1       	breq	.+84     	; 0x1a74 <__ultoa_invert+0x5c>
    1a20:	20 31       	cpi	r18, 0x10	; 16
    1a22:	81 f1       	breq	.+96     	; 0x1a84 <__ultoa_invert+0x6c>
    1a24:	e8 94       	clt
    1a26:	6f 93       	push	r22
    1a28:	6e 7f       	andi	r22, 0xFE	; 254
    1a2a:	6e 5f       	subi	r22, 0xFE	; 254
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	af 4f       	sbci	r26, 0xFF	; 255
    1a34:	b1 e0       	ldi	r27, 0x01	; 1
    1a36:	3e d0       	rcall	.+124    	; 0x1ab4 <__ultoa_invert+0x9c>
    1a38:	b4 e0       	ldi	r27, 0x04	; 4
    1a3a:	3c d0       	rcall	.+120    	; 0x1ab4 <__ultoa_invert+0x9c>
    1a3c:	67 0f       	add	r22, r23
    1a3e:	78 1f       	adc	r23, r24
    1a40:	89 1f       	adc	r24, r25
    1a42:	9a 1f       	adc	r25, r26
    1a44:	a1 1d       	adc	r26, r1
    1a46:	68 0f       	add	r22, r24
    1a48:	79 1f       	adc	r23, r25
    1a4a:	8a 1f       	adc	r24, r26
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	6a 0f       	add	r22, r26
    1a52:	71 1d       	adc	r23, r1
    1a54:	81 1d       	adc	r24, r1
    1a56:	91 1d       	adc	r25, r1
    1a58:	a1 1d       	adc	r26, r1
    1a5a:	20 d0       	rcall	.+64     	; 0x1a9c <__ultoa_invert+0x84>
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <__ultoa_invert+0x48>
    1a5e:	68 94       	set
    1a60:	3f 91       	pop	r19
    1a62:	2a e0       	ldi	r18, 0x0A	; 10
    1a64:	26 9f       	mul	r18, r22
    1a66:	11 24       	eor	r1, r1
    1a68:	30 19       	sub	r19, r0
    1a6a:	30 5d       	subi	r19, 0xD0	; 208
    1a6c:	31 93       	st	Z+, r19
    1a6e:	de f6       	brtc	.-74     	; 0x1a26 <__ultoa_invert+0xe>
    1a70:	cf 01       	movw	r24, r30
    1a72:	08 95       	ret
    1a74:	46 2f       	mov	r20, r22
    1a76:	47 70       	andi	r20, 0x07	; 7
    1a78:	40 5d       	subi	r20, 0xD0	; 208
    1a7a:	41 93       	st	Z+, r20
    1a7c:	b3 e0       	ldi	r27, 0x03	; 3
    1a7e:	0f d0       	rcall	.+30     	; 0x1a9e <__ultoa_invert+0x86>
    1a80:	c9 f7       	brne	.-14     	; 0x1a74 <__ultoa_invert+0x5c>
    1a82:	f6 cf       	rjmp	.-20     	; 0x1a70 <__ultoa_invert+0x58>
    1a84:	46 2f       	mov	r20, r22
    1a86:	4f 70       	andi	r20, 0x0F	; 15
    1a88:	40 5d       	subi	r20, 0xD0	; 208
    1a8a:	4a 33       	cpi	r20, 0x3A	; 58
    1a8c:	18 f0       	brcs	.+6      	; 0x1a94 <__ultoa_invert+0x7c>
    1a8e:	49 5d       	subi	r20, 0xD9	; 217
    1a90:	31 fd       	sbrc	r19, 1
    1a92:	40 52       	subi	r20, 0x20	; 32
    1a94:	41 93       	st	Z+, r20
    1a96:	02 d0       	rcall	.+4      	; 0x1a9c <__ultoa_invert+0x84>
    1a98:	a9 f7       	brne	.-22     	; 0x1a84 <__ultoa_invert+0x6c>
    1a9a:	ea cf       	rjmp	.-44     	; 0x1a70 <__ultoa_invert+0x58>
    1a9c:	b4 e0       	ldi	r27, 0x04	; 4
    1a9e:	a6 95       	lsr	r26
    1aa0:	97 95       	ror	r25
    1aa2:	87 95       	ror	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	ba 95       	dec	r27
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <__ultoa_invert+0x86>
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	61 05       	cpc	r22, r1
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	08 95       	ret
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	0a 2e       	mov	r0, r26
    1aba:	06 94       	lsr	r0
    1abc:	57 95       	ror	r21
    1abe:	47 95       	ror	r20
    1ac0:	37 95       	ror	r19
    1ac2:	27 95       	ror	r18
    1ac4:	ba 95       	dec	r27
    1ac6:	c9 f7       	brne	.-14     	; 0x1aba <__ultoa_invert+0xa2>
    1ac8:	62 0f       	add	r22, r18
    1aca:	73 1f       	adc	r23, r19
    1acc:	84 1f       	adc	r24, r20
    1ace:	95 1f       	adc	r25, r21
    1ad0:	a0 1d       	adc	r26, r0
    1ad2:	08 95       	ret

00001ad4 <_exit>:
    1ad4:	f8 94       	cli

00001ad6 <__stop_program>:
    1ad6:	ff cf       	rjmp	.-2      	; 0x1ad6 <__stop_program>
